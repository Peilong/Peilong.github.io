[{"authors":["admin"],"categories":null,"content":"Dr. Peilong Li is an Assistant Professor at Elizabethtown College. He currently servers as the Program Director of the Computer Science and Data Science Programs. Prior to joining Etown, Dr. Li was a Research Assistant Professor at University of Massachusetts Lowell. His research interests include Machine Learning, Big Data Analytics, Cybersecurity and High-Performance Computing. He has received research grants from funding agencies including National Science Foundation, Intel and Google. He has also established the Advanced Data Analytics Lab (ADAL) for undergraduate student research at the college.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://Peilong.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"Dr. Peilong Li is an Assistant Professor at Elizabethtown College. He currently servers as the Program Director of the Computer Science and Data Science Programs. Prior to joining Etown, Dr. Li was a Research Assistant Professor at University of Massachusetts Lowell. His research interests include Machine Learning, Big Data Analytics, Cybersecurity and High-Performance Computing. He has received research grants from funding agencies including National Science Foundation, Intel and Google. He has also established the Advanced Data Analytics Lab (ADAL) for undergraduate student research at the college.","tags":null,"title":"Peilong Li","type":"authors"},{"authors":null,"categories":null,"content":"A broad introduction to the discipline of computer science is given with a focus on its deep concepts and powerful impact.\nInstructor: Dr. Peilong Li\nOffice: Esbenshade 284B\nAppointments: By email\nNumber of Credits 4\nPre-requisites  Enthusiasm on programming High school algebra  Textbooks   (Required) Paul Deitel, and Harvey Deitel. Intro to Python for Computer Science and Data Science. 1st Edition, 2015, Pearson, ISBN: 978-0135404676.   (Others) See the reading assignments\n  ","date":1611360000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1611360000,"objectID":"78ebdf29a053825b9dd6d055293e033a","permalink":"https://Peilong.github.io/courses/cs113/","publishdate":"2021-01-23T00:00:00Z","relpermalink":"/courses/cs113/","section":"courses","summary":"A broad introduction to the discipline of computer science is given with a focus on its deep concepts and powerful impact.","tags":null,"title":"CS 113 The Power and Beauty of Computing","type":"docs"},{"authors":null,"categories":null,"content":"The fundamental concepts of computer science, with an emphasis on Python programming.\nInstructor: Dr. Peilong Li\nOffice: Nicarry 208\nAppointments: By email\nNumber of Credits 4\nPre-requisites  Enthusiasm on programming High school algebra  Textbooks   (Required) zyBooks. CS 121: Computer Science I. Sign in or create an account at learn.zybooks.com. Enter zyBook code: ETOWNCS121Fall2023. Subscribe. A subscription is $89. Students may begin subscribing on Aug 08, 2023. Subscriptions will last until Dec 27, 2023.   (Optional) Allen B. Downey. Think Python, 2nd Ed. 2015, O\u0026rsquo;Reilly Media, Inc., ISBN: 9781491939369. E-copy: link   ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"ea139dd993db979ddc3f7224a270e531","permalink":"https://Peilong.github.io/courses/cs121/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/cs121/","section":"courses","summary":"The fundamental concepts of computer science, with an emphasis on Python programming.","tags":null,"title":"CS 121 Computer Science I","type":"docs"},{"authors":null,"categories":null,"content":"To continue the presentation of the essentials of computer software development using Java. Emphasis will be placed on algorithm construction using reference variables, data structures, concurrent programming using threads, file processing, exception handling, classes and object oriented programming. GUI programming will be covered and used extensively.\nInstructor: Dr. Peilong Li\nOffice: Esbenshade 284B\nAppointments: By email\nNumber of Credits 4\nPre-requisites  CS 121 Computer Science I  Textbooks  (Required) CS 122: Computer Science II. ZyBooks.\nSign-up with: link.\nEnter zyBooks code: ETOWNCS122LiFall2024, then subscribe.   ","date":1723334400,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1723334400,"objectID":"7b34eb43874334301fd2afb4cb02e0f2","permalink":"https://Peilong.github.io/courses/cs122/","publishdate":"2024-08-11T00:00:00Z","relpermalink":"/courses/cs122/","section":"courses","summary":"As a continuation of CS I, this course will cover Java software development essentials, focusing on algorithms, data structures, threads, file processing, exception handling, OOP, and extensive GUI programming.","tags":null,"title":"CS 122 Computer Science II","type":"docs"},{"authors":null,"categories":null,"content":"Advanced system programming course covering C, Linux, Virtual Machines, Cloud Computing, and Containers in modern programming contexts.\nInstructor: Dr. Peilong Li\nOffice: Esbenshade 284B\nAppointments: By email\nNumber of Credits 4\nPre-requisites  CS 122 Computer Science II  Textbooks  (Required) Peilong Li. CS 222/EGR 222 Systems Programming. 2023, zyBooks.  Sign in or create an account at: learn.zybooks.com Enter zyBook code: ETOWNCS222EGR222LiSpring2023 Subscribe. Subscription fee: $58. Valid through end of May.     ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"5b65e41c0c9c5a1326460781bb6eb953","permalink":"https://Peilong.github.io/courses/cs222/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/cs222/","section":"courses","summary":"Advanced system programming course covering C, Linux, Virtual Machines, Cloud Computing, and Containers in modern programming contexts.","tags":null,"title":"CS/EGR 222 Systems Programming","type":"docs"},{"authors":null,"categories":null,"content":"This project-based course introduces fundamental concepts and techniques in artificial intelligence and data science, covering topics such as machine learning, data analysis, and algorithmic decision-making.\nInstructor: Dr. Peilong Li\nOffice: Esbenshade 284B\nAppointments: By email\nNumber of Credits 4\nPre-requisites  CS 121 Computer Science I Any Math course from: MA 121 Calculus I, MA 135 Discrete Math, or MA 251 Probability and Statistics.  Textbooks   (Required) CS 250: Foundations of AI and Data Science. ZyBooks.\nSign-up with: link.\nEnter zyBooks code: ETOWNCS250LiFall2024, then subscribe.   (Optional) Gareth James, et al. An Introduction to Statistical Learning with Applications in Python (ISLP).\n2023, Springer.\nISBN: 978-3-031-39189-7.\nE-copy: link   ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"7a813ebcddca295d08699df9dbf45344","permalink":"https://Peilong.github.io/courses/cs250/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/cs250/","section":"courses","summary":"Introduces fundamental concepts and techniques in artificial intelligence and data science, covering topics such as machine learning, data analysis, and algorithmic decision-making.","tags":null,"title":"CS 250 Foundations of AI and Data Science","type":"docs"},{"authors":null,"categories":null,"content":"This project-based course aims to cover the fundamental concepts and core techniques for discovering patterns in large-scale data sets. This course consists of three main modules: (1) Data Mining Pipeline, which introduces the key steps of data understanding, data preprocessing, data warehousing, data modeling and interpretation/evaluation; (2) Data Mining Methods, which covers core techniques for regression, classification, clustering, dimensionality reduction and association; and (3) Deep Learning, which discusses the state-of-art deep learning techniques such as CNN and RNN with the implementation in Tensorflow.\nInstructor: Dr. Peilong Li\nOffice: Esbenshade 284B\nAppointments: By email\nNumber of Credits 4\nPre-requisites  CS 250 Foundations of AI and Data science CS 209 Database Systems  Textbooks  (Required) Aurelien Geron. Hands-on Machine Learning with Scikit-Learn, Keras \u0026amp; Tensorflow. 3rd Edition. 2022, O\u0026rsquo;Reilly. ISBN-13: 978-1098125974   ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"7cb336faccbd60d5b6d22f9f7e912c5c","permalink":"https://Peilong.github.io/courses/cs350/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/cs350/","section":"courses","summary":"This course explores the evolution from data mining techniques to advanced deep learning methodologies, equipping students with the skills to analyze and derive insights from complex datasets.","tags":null,"title":"CS 350 From Data Mining to Deep Learning","type":"docs"},{"authors":null,"categories":null,"content":"This course covers techniques needed to collect, store, analyze, and visualize big data, particularly for applications in machine learning at scale.\nInstructor: Dr. Peilong Li\nOffice: Esbenshade 284B\nAppointments: By email\nNumber of Credits 4\nPre-requisites  DS 200 Introduction to Data science CS 209 Database Systems  Textbooks  (Required) Jules S. Damji, Brooke Wenig, Tathagata Das, Denny Lee. Learning Spark: Lightening-Fast Data Analytics, 2nd Edition. (LS). 2020, O\u0026rsquo;Reilly Media. ISBN-13: 978-1492050018. A free version of the textbook can be retrieved at: Link.  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"b241f2ddefb27365f0ef9d5bffa0600e","permalink":"https://Peilong.github.io/courses/cs354/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/cs354/","section":"courses","summary":"This course covers techniques needed to collect, store, analyze, and visualize big data, particularly for applications in machine learning at scale.","tags":null,"title":"DS 420 Big Data","type":"docs"},{"authors":null,"categories":null,"content":"This course introduces the student to the fundamentals of computer security. Foundational concepts such as confidentiality, integrity, and availability are discussed in the context of both designing systems and evaluating existing systems for vulnerabilities. Cryptography is explored as a tool that can be applied to many aspects of computer security. Theoretical discussions of security principles are enriched by examples from real world systems and protocols.\nInstructor: Dr. Peilong Li\nOffice: Esbenshade 284B\nAppointments: By email\nNumber of Credits 4\nPre-requisites  CS 122 Computer Science II  Textbooks  (Required) Wenliang Du. Computer \u0026amp; Internet Security: A Hands-on Approach. 3rd Edition. May 2022, Independently published, ISBN-13: 978-1-7330039-4-0.   ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"9a456396494c6d3d194681ad0d370944","permalink":"https://Peilong.github.io/courses/cs363/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/cs363/","section":"courses","summary":"This course introduces the student to the fundamentals of computer security.","tags":null,"title":"CS 363 Computer Security","type":"docs"},{"authors":null,"categories":null,"content":"Network Security is a comprehensive hands-on course designed for IT professionals, network administrators, and anyone interested in enhancing their network security skills. Covering a broad spectrum of topics, from the basics of networking and TCP protocols to advanced topics such as firewall implementation and security, virtual private networks, and DNS attacks and protection, this course equips students with the knowledge and skills required to defend against network threats. Students will complete a project, present it to their peers, and participate in \u0026lsquo;Capture the Flag\u0026rsquo; competitions to test their skills in a practical, hands-on environment.\nInstructor: Dr. Peilong Li\nOffice: Esbenshade 284B\nAppointments: By email\nNumber of Credits 4\nPre-requisites  CS 342 Computer Networks, and familiarity with Linux commands.  Textbooks   (Preferred) Wenliang Du. Internet Security: A Hands-on Approach. 3rd Edition. May 2022, Independently published, ISBN-13: 978-17330039-6-4.   (OR) Wenliang Du. Computer \u0026amp; Internet Security: A Hands-on Approach. 3rd Edition. May 2022, Independently published, ISBN-13: 978-17330039-4-0.   ","date":1673395200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1673395200,"objectID":"02fa0979bd958f9bb15a657eb4b9fe6a","permalink":"https://Peilong.github.io/courses/cs364/","publishdate":"2023-01-11T00:00:00Z","relpermalink":"/courses/cs364/","section":"courses","summary":"Network Security covers essentials to advanced defense, including practical projects and 'Capture the Flag' competitions for IT professionals.","tags":null,"title":"CS 364 Network Security","type":"docs"},{"authors":null,"categories":null,"content":"A capstone course for Computer Science and Information Systems majors.\nInstructor:  Dr. Peilong Li  Office:  Esbenshade 284B  Appointments:  By email  Number of Credits  2 or 4  Pre-requisites  Agreed by advisor  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"1879729cbae83798a1b002b459e16334","permalink":"https://Peilong.github.io/courses/cs400/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/cs400/","section":"courses","summary":"A capstone course for Computer Science and Information Systems majors.","tags":null,"title":"CS 400 Projects in Computing","type":"docs"},{"authors":null,"categories":null,"content":"An advanced research course for Computer Science majors and a prerequisite for Honors in the Discipline.\nInstructor:  Dr. Peilong Li  Office:  Esbenshade 284B  Appointments:  By email  Number of Credits  2 or 4  Pre-requisites  Agreed by advisor  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"aab5ac07679005971c85991a0743719f","permalink":"https://Peilong.github.io/courses/cs495/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/cs495/","section":"courses","summary":"An advanced research course for Computer Science majors and a prerequisite for Honors in the Discipline.","tags":null,"title":"CS 495 Honors Projects in Computing","type":"docs"},{"authors":null,"categories":null,"content":"An advanced research course for Computer Science majors and a prerequisite for Honors in the Discipline.\nInstructor:  Dr. Peilong Li  Office:  Esbenshade 284B  Appointments:  By email  Number of Credits  4  Pre-requisites  DS 300 - Data Mining DS 315 - Statistical Learning  ","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1536451200,"objectID":"0b8e74f03d403c0d69c0ae045c2be38c","permalink":"https://Peilong.github.io/courses/ds400/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/ds400/","section":"courses","summary":"An advanced research course for Data Science majors.","tags":null,"title":"DS 400 Data Science Capstone","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage A broad introduction to the discipline of computer science is given with a focus on its deep concepts and powerful impact. An emphasis is placed on seven “big ideas” developed by the CS Principles initiative (https://csforallteachers.org/computer-science-principles): creativity, abstraction, data, algorithms, programming, the Internet, and impact. Introductory skills in computer programming using Python is demonstrated with an emphasis on both the principles and practice of computer programming.\nStudent Learning Outcomes By the end of the course, successful students will be able to:\n Describe and apply major scientific concepts of computing, Analyze and interpret data with the aid of computers, Explain the local and global impact of computing and the associated professional, ethical, legal, security and social responsibilities, Model real-world phenomena mathematically and computationally, Use basic tools of programming to solve problems.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"adce6bbe7ea3b19db92c1a37cb4561f0","permalink":"https://Peilong.github.io/courses/cs113/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs113/overview/","section":"courses","summary":"Course Coverage A broad introduction to the discipline of computer science is given with a focus on its deep concepts and powerful impact. An emphasis is placed on seven “big ideas” developed by the CS Principles initiative (https://csforallteachers.org/computer-science-principles): creativity, abstraction, data, algorithms, programming, the Internet, and impact. Introductory skills in computer programming using Python is demonstrated with an emphasis on both the principles and practice of computer programming.\nStudent Learning Outcomes By the end of the course, successful students will be able to:","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage Explore the foundational principles of computer organization, data representation, algorithmic development, and structured programming. Emphasizing Python\u0026rsquo;s syntactic and execution traits, delve into data types, arithmetic operations, input/output mechanisms, selection and iteration constructs. Discover procedural abstraction, arrays, object-oriented programming, class design, and harness Python\u0026rsquo;s power for Data Science.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Apply fundamental computing and mathematical knowledge, including data structures and basic algorithms, to effectively solve problems using Python. Design, implement, and evaluate computer-based systems, processes, components, or programs to fulfill specific requirements. Describe and apply the core principles of the software development cycle in the context of Python programming. Demonstrate proficiency in adhering to coding standards, style guidelines, and documentation practices. Develop a solid understanding of data types and object-oriented programming concepts. Utilize Python for Data Science, including data manipulation, analysis, and visualization, to gain insights from real-world datasets. Apply Python programming constructs like strings manipulation, basic I/O operations, Boolean algebra, selection statements, loop statements, and arrays to effectively solve computational challenges using both procedural and object-oriented paradigms.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"586f57acfdddd1efbee5c3bc85123a2d","permalink":"https://Peilong.github.io/courses/cs121/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs121/overview/","section":"courses","summary":"Course Coverage Explore the foundational principles of computer organization, data representation, algorithmic development, and structured programming. Emphasizing Python\u0026rsquo;s syntactic and execution traits, delve into data types, arithmetic operations, input/output mechanisms, selection and iteration constructs. Discover procedural abstraction, arrays, object-oriented programming, class design, and harness Python\u0026rsquo;s power for Data Science.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Apply fundamental computing and mathematical knowledge, including data structures and basic algorithms, to effectively solve problems using Python.","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage To continue the presentation of the essentials of computer software development using Java. Emphasis will be placed on algorithm construction using reference variables, data structures, concurrent programming using threads, file processing, exception handling, classes and object oriented programming. GUI programming will be covered and used extensively.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Learn and understand object oriented programming concepts; Be able to use existing objects from a library or API; Be able to design and create new objects and to extend existing objects using inheritance; To be able to design and create new user interfaces using a GUI; Understand and be able to program standard sequential file operations; To understand error and exception conditions and be able to implement exception handling; Understand the basic concepts of multi-processing using threads and be able to implement multi-threaded programs; Understand the basic data structures of arrays and linked lists and how to use them; Understand the concept of recursion and be able to use it to solve programming problems.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"661f297bcb61601e9f41c7f5ab62a05a","permalink":"https://Peilong.github.io/courses/cs122/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs122/overview/","section":"courses","summary":"Course Coverage To continue the presentation of the essentials of computer software development using Java. Emphasis will be placed on algorithm construction using reference variables, data structures, concurrent programming using threads, file processing, exception handling, classes and object oriented programming. GUI programming will be covered and used extensively.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Learn and understand object oriented programming concepts; Be able to use existing objects from a library or API; Be able to design and create new objects and to extend existing objects using inheritance; To be able to design and create new user interfaces using a GUI; Understand and be able to program standard sequential file operations; To understand error and exception conditions and be able to implement exception handling; Understand the basic concepts of multi-processing using threads and be able to implement multi-threaded programs; Understand the basic data structures of arrays and linked lists and how to use them; Understand the concept of recursion and be able to use it to solve programming problems.","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage This course provides an in-depth exploration of advanced programming, emphasizing system programming, machine representation of data, dynamic structures, and files. It covers C language syntax, memory allocation, run-time data organization, function linkage, parameter passing, and the interplay between high-level and machine languages. The curriculum also introduces Linux OS and command-line skills, and integrates concepts of Virtual Machines, Cloud Computing, and Container technologies, reflecting current trends in the system programming landscape.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Apply knowledge of computing and mathematics appropriate to the discipline, including common data structures and basic algorithms, to solve problems Analyze a problem and identify and define the computing requirements appropriate to its solution Design, implement, and evaluate a computer-based system, process, component or program, including operating systems, to meet desired needs Function effectively on teams and use software engineering principles to accomplish a common goal Understand fundamentals of procedural programming with applications in electrical and computer engineering and embedded systems Understand hardware and software elements of data communications and computer networking Compare and contrast the features of the Java and C programming languages Manage memory allocation explicitly Perform low-level file access in programs  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1fedb8530bc1d35b27036fe64d67dd8f","permalink":"https://Peilong.github.io/courses/cs222/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs222/overview/","section":"courses","summary":"Course Coverage This course provides an in-depth exploration of advanced programming, emphasizing system programming, machine representation of data, dynamic structures, and files. It covers C language syntax, memory allocation, run-time data organization, function linkage, parameter passing, and the interplay between high-level and machine languages. The curriculum also introduces Linux OS and command-line skills, and integrates concepts of Virtual Machines, Cloud Computing, and Container technologies, reflecting current trends in the system programming landscape.","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage This hands-on, project-based course introduces data science, blending computer science and statistics to extract insights from diverse datasets. Students master Python\u0026rsquo;s data science tools, including Jupyter, NumPy, Pandas, and Scikit-learn, and apply advanced visualization techniques. The curriculum emphasizes statistical understanding and analytical models like regression and clustering. A key focus is on data storytelling, enabling students to effectively communicate complex insights, bridging technical analysis with strategic decision-making.\nStudent Learning Outcomes  (Concept) Understand the background and rationale behind this new data science discipline. (Programming) Proficiently use the Python data science toolset including Jupyter notebook, NumPy, Pandas, Scikit-learn etc., in the lab assignments and projects. (Visualization) Use data visualization python packages Matplotlib and Seaborn to present analytical results. (Statistics) Reinforce the understanding of statistics and its application in the scope of data science. (Analytics) Apply data analytical models including regression, clustering and decision trees to solve data science problems.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6724b4525c43062edf3a29ae504cc7c5","permalink":"https://Peilong.github.io/courses/cs250/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs250/overview/","section":"courses","summary":"Course Coverage This hands-on, project-based course introduces data science, blending computer science and statistics to extract insights from diverse datasets. Students master Python\u0026rsquo;s data science tools, including Jupyter, NumPy, Pandas, and Scikit-learn, and apply advanced visualization techniques. The curriculum emphasizes statistical understanding and analytical models like regression and clustering. A key focus is on data storytelling, enabling students to effectively communicate complex insights, bridging technical analysis with strategic decision-making.\nStudent Learning Outcomes  (Concept) Understand the background and rationale behind this new data science discipline.","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage This project-based course aims to cover the fundamental concepts and core techniques for discovering patterns in large-scale data sets. This course consists of three main modules: (1) Data Mining Pipeline, which introduces the key steps of data understanding, data preprocessing, data warehousing, data modeling and interpretation/evaluation; (2) Data Mining Methods, which covers core techniques for regression, classification, clustering, dimensionality reduction and association; and (3) Deep Learning, which discusses the state-of-art deep learning techniques such as CNN and RNN with the implementation in Tensorflow.\nStudent Learning Outcomes By the end of the course, the successful students will be able to:\n (Foundations) Understand the background, uniqueness, and application scope of data mining. (Mathematics) Grasp the mathematical foundations underlying data mining models, enhancing your ability to understand and apply these models effectively. (Data Acquisition) Extract and integrate raw data from various sources and store it in appropriate formats. (Tool Proficiency) Use the Python data science toolkit, including NumPy, Pandas, Scikit-learn, Seaborn, TensorFlow, etc., to build components within the data pipeline. (Modeling) Apply data analytical models such as classification, clustering, and neural networks to uncover patterns in large datasets. (Knowledge Communication) Interpret model results to derive knowledge and effectively communicate it to the appropriate audience.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"743689f7e6ee823d9c25303fc4dcc221","permalink":"https://Peilong.github.io/courses/cs350/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs350/overview/","section":"courses","summary":"Course Coverage This project-based course aims to cover the fundamental concepts and core techniques for discovering patterns in large-scale data sets. This course consists of three main modules: (1) Data Mining Pipeline, which introduces the key steps of data understanding, data preprocessing, data warehousing, data modeling and interpretation/evaluation; (2) Data Mining Methods, which covers core techniques for regression, classification, clustering, dimensionality reduction and association; and (3) Deep Learning, which discusses the state-of-art deep learning techniques such as CNN and RNN with the implementation in Tensorflow.","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage This course covers techniques needed to collect, store, analyze, and visualize big data, particularly for applications in machine learning at scale. The MapReduce paradigm will be taught using the popular Hadoop framework. Both batch and real-time analysis of massive quantities of data will be applied to machine learning problems such as clustering, regression, and classification. Relational SQL and NoSQL database models will be discussed and compared with use case analysis. Natural language processing will be studied as a comprehensive big data application.\nStudent Learning Outcomes By the end of the course, the successful students will be able to:\n (Concepts) Design distributed systems that manage \u0026ldquo;big data\u0026rdquo; using Hadoop and related technologies in the Hadoop Ecosystem, (Scaling) Use HDFS and MapReduce for storing and analyzing data at scale, (Programming) Write Pig and Spark scripts to process data on a distributed cluster in a more complex and programmable way, (Storing) Analyze relational data using Hive and MySQL, and analyze non-relational data using HBase and MongoDB. Learn to choose an appropriate data storage technology for your applications, (Modeling) Deploy machine learning models at scale to process distributed big data using Spark MLlib, (Managing) Understand how Hadoop clusters are managed by Big Data Framework Managers like YARN, Mesos, Zookeeper and Oozie, etc., (Streaming) Publish data to computing clusters using Kafka and Flume, and analyze streaming data using Spark Streaming.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"7cd61f1679e2ae0faca621b026c4da5e","permalink":"https://Peilong.github.io/courses/cs354/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs354/overview/","section":"courses","summary":"Course Coverage This course covers techniques needed to collect, store, analyze, and visualize big data, particularly for applications in machine learning at scale. The MapReduce paradigm will be taught using the popular Hadoop framework. Both batch and real-time analysis of massive quantities of data will be applied to machine learning problems such as clustering, regression, and classification. Relational SQL and NoSQL database models will be discussed and compared with use case analysis.","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage This course introduces the student to the fundamentals of computer security. Foundational concepts such as confidentiality, integrity, and availability are discussed in the context of both designing systems and evaluating existing systems for vulnerabilities. Cryptography is explored as a tool that can be applied to many aspects of computer security. Theoretical discussions of security principles are enriched by examples from real world systems and protocols.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Apply knowledge of computing and mathematics appropriate to the discipline, including common data structures, basic algorithms, and modular arithmetic; Design, implement, and evaluate security policies and mechanisms to enforce those policies; Discuss the central issues of computer security: confidentiality, integrity, and availability; Design protocols and systems to minimize security vulnerabilities; Analyze current threats and how to minimize the associated risks in the areas of: computer security, OS security, web security, and cryptography; Evaluate the strengths and weaknesses of various public and private key encryption techniques; Explain the usefulness of cryptographic hash functions; Communicate effectively with a broad range of audiences, and function effectively on teams using software engineering principles to accomplish a common goal.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"2a84ea45e0ec5dea811ab0075237a40c","permalink":"https://Peilong.github.io/courses/cs363/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs363/overview/","section":"courses","summary":"Course Coverage This course introduces the student to the fundamentals of computer security. Foundational concepts such as confidentiality, integrity, and availability are discussed in the context of both designing systems and evaluating existing systems for vulnerabilities. Cryptography is explored as a tool that can be applied to many aspects of computer security. Theoretical discussions of security principles are enriched by examples from real world systems and protocols.\nStudent Learning Outcomes By the end of the course, students will be able to:","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage Network Security is a comprehensive hands-on course designed for IT professionals, network administrators, and anyone interested in enhancing their network security skills. Covering a broad spectrum of topics, from the basics of networking and TCP protocols to advanced topics such as firewall implementation and security, virtual private networks, and DNS attacks and protection, this course equips students with the knowledge and skills required to defend against network threats. Students will complete a project, present it to their peers, and participate in \u0026lsquo;Capture the Flag\u0026rsquo; competitions to test their skills in a practical, hands-on environment.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Foundational Understanding: Grasp networking security fundamentals, including the protocol layers, packet sniffing and spoofing, and the use of tools such as Scapy and Wireshark. Red and Blue Teaming: Identify and simulate network threats in each protocol layer as a Red Team, and develop defense strategies as a Blue Team. Practical Application: Implement high-level security applications, from firewall setups to VPN configurations, to shield networks from vulnerabilities. Collaborative Learning: Present a network security project, applying course knowledge and receiving peer feedback. Competitive Skill Assessment: Participate in \u0026lsquo;Capture the Flag\u0026rsquo; competitions, applying knowledge to identify and defend network vulnerabilities.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"8af13cef91328a558618b399367fb6a5","permalink":"https://Peilong.github.io/courses/cs364/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs364/overview/","section":"courses","summary":"Course Coverage Network Security is a comprehensive hands-on course designed for IT professionals, network administrators, and anyone interested in enhancing their network security skills. Covering a broad spectrum of topics, from the basics of networking and TCP protocols to advanced topics such as firewall implementation and security, virtual private networks, and DNS attacks and protection, this course equips students with the knowledge and skills required to defend against network threats. Students will complete a project, present it to their peers, and participate in \u0026lsquo;Capture the Flag\u0026rsquo; competitions to test their skills in a practical, hands-on environment.","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage This course is a directed project or study requiring faculty acceptance of a proposal with a final report and defense of work. It is intended as a capstone course for Computer Science and Information Systems majors.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Apply knowledge of computing and mathematics appropriate to the discipline, including common data structures and basic algorithms Analyze a problem and identify and define the computing requirements appropriate to its solution Design, implement, and evaluate a computer-based system, process, component or program, including operating systems and database systems, to meet desired needs Communicate effectively with a broad range of audiences Engage in continuing professional development  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"3032a035b0c874906b3f21611bda1778","permalink":"https://Peilong.github.io/courses/cs400/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs400/overview/","section":"courses","summary":"Course Coverage This course is a directed project or study requiring faculty acceptance of a proposal with a final report and defense of work. It is intended as a capstone course for Computer Science and Information Systems majors.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Apply knowledge of computing and mathematics appropriate to the discipline, including common data structures and basic algorithms Analyze a problem and identify and define the computing requirements appropriate to its solution Design, implement, and evaluate a computer-based system, process, component or program, including operating systems and database systems, to meet desired needs Communicate effectively with a broad range of audiences Engage in continuing professional development  ","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage This course is a directed project or study requiring faculty acceptance of a proposal with a final report and defense of work. It is intended as an advanced research course for Computer Science majors and a prerequisite for Honors in the Discipline.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Apply knowledge of computing and mathematics appropriate to the discipline, including common data structures and basic algorithms Analyze a problem and identify and define the computing requirements appropriate to its solution Design, implement, and evaluate a computer-based system, process, component or program, including operating systems and database systems, to meet desired needs Communicate effectively with a broad range of audiences Engage in continuing professional development  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"7b7760f2d90d9921b9d5ebec049ba7bf","permalink":"https://Peilong.github.io/courses/cs495/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs495/overview/","section":"courses","summary":"Course Coverage This course is a directed project or study requiring faculty acceptance of a proposal with a final report and defense of work. It is intended as an advanced research course for Computer Science majors and a prerequisite for Honors in the Discipline.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Apply knowledge of computing and mathematics appropriate to the discipline, including common data structures and basic algorithms Analyze a problem and identify and define the computing requirements appropriate to its solution Design, implement, and evaluate a computer-based system, process, component or program, including operating systems and database systems, to meet desired needs Communicate effectively with a broad range of audiences Engage in continuing professional development  ","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Coverage This course is a directed project or study requiring faculty acceptance of a proposal with a final report and defense of work. It is intended as an advanced research course for Data Science.\nUnder the supervision of a faculty mentor, students use their knowledge of data science to complete a high level project contributing to research in an academic area or to solve a problem for a local business. Projects will involve data collection, data cleaning, data analysis, and reporting results both orally and in writing to a domain expert or business leader. All problems are unstructured with no predetermined solution.\nStudent Learning Outcomes By the end of the course, students will be able to:\n Apply knowledge of data science appropriate to the discipline, including advanced skills like big data parallel processing and neural networks Analyze a problem and identify and define the data analytical requirements and procedure appropriate to its solution Design and implement a computer-based system, process, component or program, to address an open data problem (including open data competitions hosted on Kaggle) Communicate effectively with a broad range of audiences Engage in continuing professional development  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"471ad1d3cc872aee97c2a52bf3fa4d10","permalink":"https://Peilong.github.io/courses/ds400/overview/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ds400/overview/","section":"courses","summary":"Course Coverage This course is a directed project or study requiring faculty acceptance of a proposal with a final report and defense of work. It is intended as an advanced research course for Data Science.\nUnder the supervision of a faculty mentor, students use their knowledge of data science to complete a high level project contributing to research in an academic area or to solve a problem for a local business.","tags":null,"title":"Course Overview","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs113/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your Etown email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nEvery student should sign up for Microsoft Teams and join the course discussion channel \u0026ldquo;CS113-SP21\u0026rdquo;. Discussions are encouraged to be posted on this channel. Private instant messages can be sent directly to your recipient, e.g. the instructor \u0026ldquo;Dr. Li\u0026rdquo;.\nJoin my Teams group: link.\nAttendance Policies Attendance is expected of every student at every lecture. Students are responsible for all content covered in class as well as assigned book chapters. Due to their nature, pop quizzes cannot be made up.\nExcept in the case of documented emergencies, neither exams nor in-class labs can be made up afterwards. For excused absences, students must arrange to take the exam or do the lab before the normally scheduled time. Arrangements must be made with the instructor at least two weeks prior to the scheduled time.\nStudents are expected to maintain an attitude of respect at all times toward their colleagues, the equipment, and the instructor. Students are expected to refrain from using the computers for non-course related purposes during class time and will be penalized 1% of the final grade for each occurrence. Cell phones and similar devices should be turned off before entering the classroom. Students who use offensive language, misuse computing facilities, or are otherwise disruptive of the classroom will be asked to leave.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will posted through Piazza group. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Plagiarism Please refer to the Student Handbook for the college’s policy. All projects and assignments must be completed by students individually, without assistance from anyone other than the instructor. Students can discuss the course material with each other at a conceptual level, but each student must do his or her own work. For projects, exams, and all other activities in the course, students are expected to act according to the official policy on academic dishonesty and the highest standards of personal integrity.\nThe first infraction of academic honesty in this course will carry a penalty of a 0 for the project, lab, or exam in question and a reduction of a full letter grade in the final grade. If a second infraction occurs, the students involved will fail the course, and the instructor will seek the maximum penalty possible under the college’s regulations, up to and including expulsion.\nStatement on Disability Full statement can be found at link. Elizabethtown College welcomes otherwise qualified students with disabilities to participate in all of its courses, programs, services, and activities. If you have a documented disability and would like to request accommodations in order to access course material, activities, or requirements, please contact the Director of Disability Services, Lynne Davies, by phone (361-1227) or e-mail daviesl@etown.edu. If your documentation meets the college’s documentation guidelines, you will be given a letter from Disability Services for each of your professors. Students experiencing certain documented temporary conditions, such as post-concussive symptoms, may also qualify for temporary academic accommodations and adjustments. As early as possible in the semester, set up an appointment to meet with the instructor to discuss the academic adjustments specified in your accommodations letter as they pertain to my class.\nCOVID-related Expectations All students are expected to adhere to the established community expectations around safety, including: daily digital health reporting, physical distancing, proper wearing of facial coverings within buildings and classrooms and when within six feet of individuals outdoors, frequent handwashing, and participation in cleaning and sanitizing protocols as requested. You will be turned away from class if you do not have a face covering. Students diagnosed with a health condition that precludes mask wearing can contact Lynne Davies in Disability Services (daviesl@etown.edu) to request remote learning as a reasonable accommodation.\nIf you are exhibiting any symptoms of COVID or fail to pass the daily health screen, do not come to class. Failure to adhere to the established community expectations around safety will result in notification of Campus Security and application of the student conduct process for failure to comply, endangering the well-being of others, and/or disorderly conduct. The student code of conduct applies also to participation in all virtual activities, including Zoom sessions and discussion boards\nStatement on Religious Observances The College is eager to facilitate individual religious beliefs and practices whenever possible while retaining course student learning outcomes. It is your responsibility to meet with the class instructor in advance to request arrangements related to your religious observances that may conflict with this class, and to make appropriate plans to make up any missed work.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"50532c56c3aef464216af2029db14c9e","permalink":"https://Peilong.github.io/courses/cs113/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs113/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs113/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your Etown email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs121/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each day and 3) reminders on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every lecture. Students are responsible for all content covered in class as well as assigned book chapters. Due to their nature, pop quizzes cannot be made up.\nExcept in the case of documented emergencies, neither exams nor in-class labs can be made up afterwards. For excused absences, students must arrange to take the exam or do the lab before the normally scheduled time. Arrangements must be made with the instructor at least two weeks prior to the scheduled time.\nStudents are expected to maintain an attitude of respect at all times toward their colleagues, the equipment, and the instructor. Cell phones and similar devices is prohibited from using during lecturing time. Students who use offensive language, misuse computing facilities, or are otherwise disruptive of the classroom will be asked to leave.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Plagiarism Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on the Use of ChatGPT and Generative AI Tools To maintain course integrity and ensure equal opportunity for all students, submissions generated by artificial intelligence (AI) systems, including ChatGPT, Bing Chat, Claude, Google Bard, or similar tools, are not allowed for classwork or assessments. Such AI usage diminishes the development of critical skills vital for academic success. While students can use AI for research and idea generation, all submitted work must be their original writing. It\u0026rsquo;s essential to recognize both the advantages and limitations of AI in learning and research. AI suggestions aren\u0026rsquo;t always accurate, so students should assess AI outputs critically. Breaching this guideline results in academic misconduct. Seek clarification if uncertain about AI usage in assignments.\nStatement on Disability Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"2f52d50d64ea7c7c2f5b4dd7d12980d8","permalink":"https://Peilong.github.io/courses/cs121/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs121/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs121/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each day and 3) reminders on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs122/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your Etown email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every lecture. Students are responsible for all content covered in class as well as assigned book chapters. Due to their nature, pop quizzes cannot be made up.\nExcept in the case of documented emergencies, neither exams nor in-class labs can be made up afterwards. For excused absences, students must arrange to take the exam or do the lab before the normally scheduled time. Arrangements must be made with the instructor at least two weeks prior to the scheduled time.\nStudents are expected to maintain an attitude of respect at all times toward their colleagues, the equipment, and the instructor. Cell phones and similar devices is prohibited from using during lecturing time. Students who use offensive language, misuse computing facilities, or are otherwise disruptive of the classroom will be asked to leave.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Academic Dishonesty Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on the Use of ChatGPT and Generative AI Tools The use of GenAI tools like ChatGPT to generate source code is prohibited for your assignments in this course unless otherwise noted in the syllabus. Therefore, your instructor will consider it a violation of academic integrity to use a GenAI tool for any purpose that is not explicitly outlined in assignment instructions. While this new technology can be very useful in certain contexts, it is important to make sure that its usage in the classroom setting is limited in order to ensure that you are doing original work and developing your critical thinking skills. In circumstances in which AI usage is permitted in class, you must acknowledge that usage and provide the chatbot with credit when it is a cited source. For instance, to cite ChatGPT in APA, the APA provides some direction at https://apastyle.apa.org/blog/how-to-cite-chatgpt. If you have any questions or uncertainty over the use of AI in this course, please reach out to the instructor.\nStatement on Disability, Religious Observances, and COVID-Related Expectations Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nInternational Student Accommodation In recognition of the diverse linguistic backgrounds of our international students, we offer several accommodations to ensure a fair and supportive learning environment.\n Exams: If you encounter unfamiliar terms not covered in class, the Testing Center proctors are authorized to assist with translations. This support aims to clarify the meaning without providing an advantage. Oral Presentations: International students, along with those who have auditory processing challenges, may request extended time for presentations. You are also permitted to use written notes to aid your delivery. Time adjustments will be made on a case-by-case basis to ensure you can effectively convey your knowledge while staying within reasonable limits.  If you require these or other accommodations, please communicate your needs in advance so appropriate arrangements can be made.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"cfbab54580c73c2ef42cbb54c92bff2e","permalink":"https://Peilong.github.io/courses/cs122/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs122/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs122/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your Etown email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs222/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every lecture. Students are responsible for all content covered in class as well as assigned book chapters. Due to their nature, pop quizzes cannot be made up.\nExcept in the case of documented emergencies, neither exams nor in-class labs can be made up afterwards. For excused absences, students must arrange to take the exam or do the lab before the normally scheduled time. Arrangements must be made with the instructor at least two weeks prior to the scheduled time.\nStudents are expected to maintain an attitude of respect at all times toward their colleagues, the equipment, and the instructor. Cell phones and similar devices is prohibited from using during lecturing time. Students who use offensive language, misuse computing facilities, or are otherwise disruptive of the classroom will be asked to leave.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Plagiarism Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on the Use of ChatGPT and Generative AI Tools To maintain course integrity and ensure equal opportunity for all students, submissions generated by artificial intelligence (AI) systems, including ChatGPT, Bing Chat, Claude, Google Bard, or similar tools, are not allowed for classwork or assessments. Such AI usage diminishes the development of critical skills vital for academic success. While students can use AI for research and idea generation, all submitted work must be their original writing. It\u0026rsquo;s essential to recognize both the advantages and limitations of AI in learning and research. AI suggestions aren\u0026rsquo;t always accurate, so students should assess AI outputs critically. Breaching this guideline results in academic misconduct. Seek clarification if uncertain about AI usage in assignments.\nStatement on Disability Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"9e83408c409b5a551add9d9d1df9924a","permalink":"https://Peilong.github.io/courses/cs222/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs222/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs222/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs250/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every lecture. Students are responsible for all content covered in class as well as assigned book chapters. Due to their nature, pop quizzes cannot be made up.\nExcept in the case of documented emergencies, neither exams nor in-class labs can be made up afterwards. For excused absences, students must arrange to take the exam or do the lab before the normally scheduled time. Arrangements must be made with the instructor at least two weeks prior to the scheduled time.\nStudents are expected to maintain an attitude of respect at all times toward their colleagues, the equipment, and the instructor. Cell phones and similar devices is prohibited from using during lecturing time. Students who use offensive language, misuse computing facilities, or are otherwise disruptive of the classroom will be asked to leave.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Academic Dishonesty Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on the Use of ChatGPT and Generative AI Tools The use of GenAI tools like ChatGPT to generate source code is prohibited for your assignments in this course unless otherwise noted in the syllabus. Therefore, your instructor will consider it a violation of academic integrity to use a GenAI tool for any purpose that is not explicitly outlined in assignment instructions. While this new technology can be very useful in certain contexts, it is important to make sure that its usage in the classroom setting is limited in order to ensure that you are doing original work and developing your critical thinking skills. In circumstances in which AI usage is permitted in class, you must acknowledge that usage and provide the chatbot with credit when it is a cited source. For instance, to cite ChatGPT in APA, the APA provides some direction at https://apastyle.apa.org/blog/how-to-cite-chatgpt. If you have any questions or uncertainty over the use of AI in this course, please reach out to the instructor.\nStatement on Disability, Religious Observances, and COVID-Related Expectations Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nInternational Student Accommodation In recognition of the diverse linguistic backgrounds of our international students, we offer several accommodations to ensure a fair and supportive learning environment.\n Exams: If you encounter unfamiliar terms not covered in class, the Testing Center proctors are authorized to assist with translations. This support aims to clarify the meaning without providing an advantage. Oral Presentations: International students, along with those who have auditory processing challenges, may request extended time for presentations. You are also permitted to use written notes to aid your delivery. Time adjustments will be made on a case-by-case basis to ensure you can effectively convey your knowledge while staying within reasonable limits.  If you require these or other accommodations, please communicate your needs in advance so appropriate arrangements can be made.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"de9935a11c010d8e6524fc12bbd66901","permalink":"https://Peilong.github.io/courses/cs250/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs250/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs250/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs350/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every lecture. Students are responsible for all content covered in class as well as assigned book chapters. Due to their nature, pop quizzes cannot be made up.\nExcept in the case of documented emergencies, neither exams nor in-class labs can be made up afterwards. For excused absences, students must arrange to take the exam or do the lab before the normally scheduled time. Arrangements must be made with the instructor at least two weeks prior to the scheduled time.\nStudents are expected to maintain an attitude of respect at all times toward their colleagues, the equipment, and the instructor. Cell phones and similar devices is prohibited from using during lecturing time. Students who use offensive language, misuse computing facilities, or are otherwise disruptive of the classroom will be asked to leave.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Academic Hishonesty Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on the Use of ChatGPT and Generative AI Tools The use of GenAI tools like ChatGPT to generate source code is prohibited for your assignments in this course unless otherwise noted in the syllabus. Therefore, your instructor will consider it a violation of academic integrity to use a GenAI tool for any purpose that is not explicitly outlined in assignment instructions. While this new technology can be very useful in certain contexts, it is important to make sure that its usage in the classroom setting is limited in order to ensure that you are doing original work and developing your critical thinking skills. In circumstances in which AI usage is permitted in class, you must acknowledge that usage and provide the chatbot with credit when it is a cited source. For instance, to cite ChatGPT in APA, the APA provides some direction at https://apastyle.apa.org/blog/how-to-cite-chatgpt. If you have any questions or uncertainty over the use of AI in this course, please reach out to the instructor.\nStatement on Disability, Religious Observances, and COVID-Related Expectations Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nInternational Student Accommodation In recognition of the diverse linguistic backgrounds of our international students, we offer several accommodations to ensure a fair and supportive learning environment.\n Exams: If you encounter unfamiliar terms not covered in class, the Testing Center proctors are authorized to assist with translations. This support aims to clarify the meaning without providing an advantage. Oral Presentations: International students, along with those who have auditory processing challenges, may request extended time for presentations. You are also permitted to use written notes to aid your delivery. Time adjustments will be made on a case-by-case basis to ensure you can effectively convey your knowledge while staying within reasonable limits.  If you require these or other accommodations, please communicate your needs in advance so appropriate arrangements can be made.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"0e0ec5e1db77a17264a8ba939e76e9d6","permalink":"https://Peilong.github.io/courses/cs350/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs350/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs350/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/ds420/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every lecture. Students are responsible for all content covered in class as well as assigned book chapters. Due to their nature, pop quizzes cannot be made up.\nExcept in the case of documented emergencies, neither exams nor in-class labs can be made up afterwards. For excused absences, students must arrange to take the exam or do the lab before the normally scheduled time. Arrangements must be made with the instructor at least two weeks prior to the scheduled time.\nStudents are expected to maintain an attitude of respect at all times toward their colleagues, the equipment, and the instructor. Cell phones and similar devices is prohibited from using during lecturing time. Students who use offensive language, misuse computing facilities, or are otherwise disruptive of the classroom will be asked to leave.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Plagiarism Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on Disability Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"b7cdc2f678600652c784f40b34cd8b09","permalink":"https://Peilong.github.io/courses/cs354/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs354/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/ds420/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs363/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every lecture. Students are responsible for all content covered in class as well as assigned book chapters. Due to their nature, pop quizzes cannot be made up.\nExcept in the case of documented emergencies, neither exams nor in-class labs can be made up afterwards. For excused absences, students must arrange to take the exam or do the lab before the normally scheduled time. Arrangements must be made with the instructor at least two weeks prior to the scheduled time.\nStudents are expected to maintain an attitude of respect at all times toward their colleagues, the equipment, and the instructor. Cell phones and similar devices is prohibited from using during lecturing time. Students who use offensive language, misuse computing facilities, or are otherwise disruptive of the classroom will be asked to leave.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Plagiarism Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on the Use of ChatGPT and Generative AI Tools To maintain course integrity and ensure equal opportunity for all students, submissions generated by artificial intelligence (AI) systems, including ChatGPT, Bing Chat, Claude, Google Bard, or similar tools, are not allowed for classwork or assessments. Such AI usage diminishes the development of critical skills vital for academic success. While students can use AI for research and idea generation, all submitted work must be their original writing. It\u0026rsquo;s essential to recognize both the advantages and limitations of AI in learning and research. AI suggestions aren\u0026rsquo;t always accurate, so students should assess AI outputs critically. Breaching this guideline results in academic misconduct. Seek clarification if uncertain about AI usage in assignments.\nStatement on Disability Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"a4cf40d7092656b3257c2c8b5468a484","permalink":"https://Peilong.github.io/courses/cs363/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs363/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs363/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs364/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every lecture. Students are responsible for all content covered in class as well as assigned book chapters. Due to their nature, pop quizzes cannot be made up.\nExcept in the case of documented emergencies, neither exams nor in-class labs can be made up afterwards. For excused absences, students must arrange to take the exam or do the lab before the normally scheduled time. Arrangements must be made with the instructor at least two weeks prior to the scheduled time.\nStudents are expected to maintain an attitude of respect at all times toward their colleagues, the equipment, and the instructor. Cell phones and similar devices is prohibited from using during lecturing time. Students who use offensive language, misuse computing facilities, or are otherwise disruptive of the classroom will be asked to leave.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Plagiarism Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on the Use of ChatGPT and Generative AI Tools To maintain course integrity and ensure equal opportunity for all students, submissions generated by artificial intelligence (AI) systems, including ChatGPT, Bing Chat, Claude, Google Bard, or similar tools, are not allowed for classwork or assessments. Such AI usage diminishes the development of critical skills vital for academic success. While students can use AI for research and idea generation, all submitted work must be their original writing. It\u0026rsquo;s essential to recognize both the advantages and limitations of AI in learning and research. AI suggestions aren\u0026rsquo;t always accurate, so students should assess AI outputs critically. Breaching this guideline results in academic misconduct. Seek clarification if uncertain about AI usage in assignments.\nStatement on Disability Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"5d2a818e57b71b8ad3e37594fce73435","permalink":"https://Peilong.github.io/courses/cs364/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs364/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/cs364/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/ds400/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every meeting. Students should come to meetings prepared to explain their progress and discuss appropriate technical issues.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Plagiarism Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on Disability Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"26365685c4e83f48b0ac38968260cd61","permalink":"https://Peilong.github.io/courses/cs400/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs400/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/ds400/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Announcements \u0026amp; Discussion All course announcements will be posted via the Canvas Announcements page – you are responsible for checking the email updates (or app notifications) from Canvas regularly.\nDiscussions can be made via the Canvas Discussion page – you should never post complete programs to Discussion page (only general questions are permitted).\nNeed to DM (direct message) me? Join my Discord Q\u0026amp;A server: link\nAttendance Policies Attendance is expected of every student at every meeting. Students should come to meetings prepared to explain their progress and discuss appropriate technical issues.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will posted through Piazza group. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Plagiarism Please refer to the Student Handbook for the college’s policy. All projects and assignments must be completed by students individually, without assistance from anyone other than the instructor. Students can discuss the course material with each other at a conceptual level, but each student must do his or her own work. For projects, exams, and all other activities in the course, students are expected to act according to the official policy on academic dishonesty and the highest standards of personal integrity.\nThe first infraction of academic honesty in this course will carry a penalty of a 0 for the project, lab, or exam in question and a reduction of a full letter grade in the final grade. If a second infraction occurs, the students involved will fail the course, and the instructor will seek the maximum penalty possible under the college’s regulations, up to and including expulsion.\nStatement on Disability Full statement can be found at link. Elizabethtown College welcomes otherwise qualified students with disabilities to participate in all of its courses, programs, services, and activities. If you have a documented disability and would like to request accommodations in order to access course material, activities, or requirements, please contact the Director of Disability Services, Lynne Davies, by phone (361-1227) or e-mail daviesl@etown.edu. If your documentation meets the college’s documentation guidelines, you will be given a letter from Disability Services for each of your professors. Students experiencing certain documented temporary conditions, such as post-concussive symptoms, may also qualify for temporary academic accommodations and adjustments. As early as possible in the semester, set up an appointment to meet with the instructor to discuss the academic adjustments specified in your accommodations letter as they pertain to my class.\nCOVID-related Expectations All students are expected to adhere to the established community expectations around safety, including: daily digital health reporting, physical distancing, proper wearing of facial coverings within buildings and classrooms and when within six feet of individuals outdoors, frequent handwashing, and participation in cleaning and sanitizing protocols as requested. You will be turned away from class if you do not have a face covering. Students diagnosed with a health condition that precludes mask wearing can contact Lynne Davies in Disability Services (daviesl@etown.edu) to request remote learning as a reasonable accommodation.\nIf you are exhibiting any symptoms of COVID or fail to pass the daily health screen, do not come to class. Failure to adhere to the established community expectations around safety will result in notification of Campus Security and application of the student conduct process for failure to comply, endangering the well-being of others, and/or disorderly conduct. The student code of conduct applies also to participation in all virtual activities, including Zoom sessions and discussion boards\nStatement on Religious Observances The College is eager to facilitate individual religious beliefs and practices whenever possible while retaining course student learning outcomes. It is your responsibility to meet with the class instructor in advance to request arrangements related to your religious observances that may conflict with this class, and to make appropriate plans to make up any missed work.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"7c15557311530eb0dc7e51c4322d9d58","permalink":"https://Peilong.github.io/courses/cs495/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs495/policy/","section":"courses","summary":"Course Announcements \u0026amp; Discussion All course announcements will be posted via the Canvas Announcements page – you are responsible for checking the email updates (or app notifications) from Canvas regularly.\nDiscussions can be made via the Canvas Discussion page – you should never post complete programs to Discussion page (only general questions are permitted).\nNeed to DM (direct message) me? Join my Discord Q\u0026amp;A server: link\nAttendance Policies Attendance is expected of every student at every meeting.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/ds400/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.\nI have created a Microsoft Teams channel (link) to facilitate course related discussion. Discussions are encouraged to be posted on the \u0026ldquo;QA\u0026rdquo; channel from Teams. Private instant messages can be sent directly to your recipient by search your recipient\u0026rsquo;s name on the \u0026ldquo;search\u0026rdquo; bar.\nAttendance Policies Attendance is expected of every student at every meeting. Students should come to meetings prepared to explain their progress and discuss appropriate technical issues.\nStatement on School Closure In the event that classes do not meet because Elizabethtown College is closed or delayed due to inclement weather or some other emergency, the slides that would have been covered during the missed classes will be posted through Canvas. Students are expected to do the assigned reading, review the slides, and e-mail the instructor with any questions. There will also be an opportunity to ask questions about the material when classes resume.\nIf a scheduled exam or lab is missed, it will normally be made up on the day that classes resume. If the College is closed on a day when a project is due, the project due date will also normally be extended until the day when classes resume. If circumstances render either of these makeup policies unreasonable, the instructor will send an e-mail explaining an alternative makeup opportunity to each student’s Elizabethtown e-mail account.\nStatement on Plagiarism Check out the up-to-date statement from: Elizabethtown College Catalog, \u0026ldquo;Academic Judicial System\u0026rdquo;\nStatement on Disability Full statement can be found at: Course Syllabus on Disability Services, Religious Observances, and COVID related expectations.\nDiversity and Inclusivity Statement I consider this classroom to be a place where you will be treated with respect, and I welcome individuals of all ages, backgrounds, beliefs, ethnicities, genders, gender identities, gender expressions, national origins, religious affiliations, sexual orientations, ability - and other visible and non-visible differences. All members of this class are expected to contribute to a respectful, welcoming and inclusive environment for every other member of the class.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1b56250751e6cd7a572ded42f12d2a1f","permalink":"https://Peilong.github.io/courses/ds400/policy/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ds400/policy/","section":"courses","summary":"Course Schedule The most up-to-date course schedule will be posted on course website schedule page: https://peilong.github.io/courses/ds400/schedule/. Students are responsible for checking the schedule regularly. Schedule page will include: 1) teaching topics for each meeting; 2) reading assignments for each week and 3) special notes on specific days.\nCourse Announcements \u0026amp; Discussion All course announcements will be sent to your E-Town email accounts via Canvas Announcements. You are responsible for signing up for this service and checking your emails regularly.","tags":null,"title":"Policy Statements","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 3%: Persistence. Attendance and in-class question answering. 6%: A number of in-class pop quizzes. 18%: 6 individual homework. 18%: 3 team projects. 20%: 5 in-class labs. 15%: Midterm exam. 20%: Final exam.  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     In-class Labs All labs are to be done individually, in class, with the assistance of the instructor. Each assignment will be given near the beginning of a class and must be uploaded to Canvas (https://etown.instructure.com/) before the end of the class without late penalty. Extended submission is due on the same day before midnight, but any submission during this grace period will receive 15 points (out of 100) of late penalty. Submissions beyond midnight the same day will not be accepted. To receive full credit, a programming assignment must run without exceptions (errors), but partial credit will be awarded based on the understanding of the material demonstrated by the student’s code.\nHomework All homework assignments have to be completed individually in this course. Typically, you will have about two weeks to complete each assignment.\nProjects All projects are team projects in this course. For each project, all students must form teams of 2-3 members. Students should select their teams by using the Groups tab under People, on the Canvas webpage.\nTeams are responsible for dividing their workload and meeting offline for at least 3 times. Documented meeting minutes have to be submitted as part of the deliverable. Except under extreme circumstances, all members of the team will receive the same grade for each project. One member of each team is designated the leader. The files for each project should be zipped up and uploaded by the team leader using Canvas before the due date.\nProject and Homework Grading and Late Policy All homework and project assignments will be graded based on the following criteria:\n Correctness: Finding the right answer Formatting:\tDisplaying the right answer according to instructions Style and Documentation: Producing readable code with appropriate comments  In general, assignments will be graded with the diff utility. For that reason, it is imperative that project output matches sample output to the character.\nLate assignment will lose points per day, including weekends and holidays. For example, -1 after 1 day, -2 after 2 days, -4 after 3 days … until 8+ days students will receive 0 score. Under no circumstances should any student disclose their code, or copy the code written by other students or from an outside source. Both students will receive 0 score on the disclosed/copied assignment.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"f706688bb2bc15c6c9e5f31f061a299f","permalink":"https://Peilong.github.io/courses/cs113/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs113/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 3%: Persistence. Attendance and in-class question answering. 6%: A number of in-class pop quizzes. 18%: 6 individual homework. 18%: 3 team projects. 20%: 5 in-class labs. 15%: Midterm exam. 20%: Final exam.  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 5%: X in-class pop quizzes. 20%: Bi-daily reading and coding homework. 20%: 5 team projects. 15%: 6 in-class labs (drop the lowest grade). 15%: 2 lab tests. 10%: 1 midterm exam. 15%: 1 final exam.  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     Bi-daily Reading Homework All reading and coding homework assignments have to be completed individually in this course. All the bi-daily homework will be released at the beginning of the semester. Each homework is due by 9:30 AM on the class day. For example, \u0026ldquo;Reading Week 2-2\u0026rdquo; is due by 9:30 AM on Wednesday of week 2. Students are welcome to finish the assignments ahead of the scheduled deadline, but no late submission is allowed.\nIn-class Labs All labs are to be done individually, in class, with the assistance of the instructor and TAs. Each assignment will be given near the beginning of a class and must be completed before the due time. Some of the labs allow for late submission till midnight with late penalty, but no submission is allowed beyond the lab day. To receive full credits, a programming assignment must pass all given test cases, but partial credits will be awarded based on the understanding of the material demonstrated by the student’s code.\nTeam Projects All projects are team projects in this course. For each project, students must form a team of 2 members. Teams are responsible for dividing their workload and meeting offline for at least 2 times for each project. Documented meeting agenda and minutes have to be submitted as part of the deliverable. Students should select their teams by using the Groups tab under People, on the Canvas webpage.\nTeams are responsible for dividing their workload. Except under extreme circumstances, all members of the team will receive the same grade for each project. One member of each team is designated the leader. The files for each project should be zipped up and uploaded by the team leader using Canvas before the due date. Projects must not be stored in a public folder. All project submissions must follow the provided file name requirements or risk a score of 0. If the project does not compile, the student will receive a score of 0.\nProjects will be graded based on the following criteria:\n Correctness: Finding the right answer Formatting:\tDisplaying the right answer according to instructions Style and Documentation: Producing readable code with appropriate comments  Only project is allowed to submit late. Late submissions will lose points per day, including weekends and holidays. For example, -1 after 1 day, -2 after 2 days, -4 after 3 days … until 8+ days students will receive 0 score. Under no circumstances should any student disclose their code, or copy the code written by other students or from an outside source. Both students will receive 0 score on the disclosed/copied assignment.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"f91393c810ecb40dcac4b69ae75336b3","permalink":"https://Peilong.github.io/courses/cs121/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs121/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 5%: X in-class pop quizzes. 20%: Bi-daily reading and coding homework. 20%: 5 team projects. 15%: 6 in-class labs (drop the lowest grade). 15%: 2 lab tests. 10%: 1 midterm exam. 15%: 1 final exam.  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 8% : A number of in-class pop quizzes. 15% : Bi-daily reading assignments. 12%: 4 individual homework. 15%: 3 team projects. 12%: 4 in-class labs. 16%: 2 midterm exams. 10%: 2 lab tests. 15%: Final exam or project.  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     In-class Labs All labs are to be done individually, in class, with the assistance of the instructor. Each assignment will be given near the beginning of a class and must be uploaded to Canvas before the due time. Some of the labs allow for late submission till midnight with late penalty, but no submission is allowed beyond the lab day. To receive full credit, a programming assignment must compile, but partial credit will be awarded based on the understanding of the material demonstrated by the student’s code.\nIndividual Homework and Team Projects All homework assignments have to be completed individually in this course. Homework assignments are \u0026ldquo;lab-like\u0026rdquo; small programs that need to be completed in a week or two.\nAll projects are team projects in this course. For each project, students must form a team of 2 members. Teams are responsible for dividing their workload and meeting offline for at least 2 times for each project. Documented meeting minutes have to be submitted as part of the deliverable. Students should select their teams by using the Groups tab under People, on the Canvas webpage.\nExcept under extreme circumstances, all members of the team will receive the same grade for each project. One member of each team is designated the leader. The files for each project should be zipped up and uploaded by the team leader using Canvas before the due date. If the project does not compile, the student will receive a score of 0.\nLate Policy\nIn general, homework and projects will be graded by the autograder. For that reason, it is imperative that project output matches sample output to the character.\nLate assignment will lose points per day, including weekends and holidays. For example, -1 after 1 day, -2 after 2 days, -4 after 3 days … until 8+ days students will receive 0 score. Under no circumstances should any student disclose their code, or copy the code written by other students or from an outside source. Both students will receive 0 score on the disclosed/copied assignment.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"eae6e13fc2a77761fd5a1daa60a10eed","permalink":"https://Peilong.github.io/courses/cs122/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs122/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 8% : A number of in-class pop quizzes. 15% : Bi-daily reading assignments. 12%: 4 individual homework. 15%: 3 team projects. 12%: 4 in-class labs. 16%: 2 midterm exams. 10%: 2 lab tests. 15%: Final exam or project.  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 4% : A number of in-class pop quizzes. 15%: Bi-daily reading assignments. 16%: 4 individual homework. 15%: 3 team projects. 15%: 5 in-class labs. 20%: 2 midterm exams. 15%: Final exam or project.  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     In-class Labs All labs are to be done individually, in class, with the assistance of the instructor. Each assignment will be given near the beginning of a class and must be uploaded to Canvas before the due time. Some of the labs allow for late submission till midnight with late penalty, but no submission is allowed beyond the lab day. To receive full credit, a programming assignment must compile, but partial credit will be awarded based on the understanding of the material demonstrated by the student’s code.\nIndividual Homework and Team Projects All homework assignments have to be completed individually in this course. Homework assignments are \u0026ldquo;lab-like\u0026rdquo; small programs that need to be completed in a week or two.\nAll projects are team projects in this course. For each project, students must form a team of 2 members. Teams are responsible for dividing their workload and meeting offline for at least 2 times for each project. Documented meeting minutes have to be submitted as part of the deliverable. Students should select their teams by using the Groups tab under People, on the Canvas webpage.\nExcept under extreme circumstances, all members of the team will receive the same grade for each project. One member of each team is designated the leader. The files for each project should be zipped up and uploaded by the team leader using Canvas before the due date. If the project does not compile, the student will receive a score of 0.\nLate Policy\nIn general, homework and projects will be graded with the diff utility. For that reason, it is imperative that project output matches sample output to the character.\nLate assignment will lose points per day, including weekends and holidays. For example, -1 after 1 day, -2 after 2 days, -4 after 3 days … until 8+ days students will receive 0 score. Under no circumstances should any student disclose their code, or copy the code written by other students or from an outside source. Both students will receive 0 score on the disclosed/copied assignment.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"2d7a75ceca7107a468a47c77cce1952f","permalink":"https://Peilong.github.io/courses/cs222/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs222/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 4% : A number of in-class pop quizzes. 15%: Bi-daily reading assignments. 16%: 4 individual homework. 15%: 3 team projects. 15%: 5 in-class labs. 20%: 2 midterm exams. 15%: Final exam or project.  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 6% : A number of in-class pop quizzes. 5% : Individual paper reading assignment. 5% : Team paper presentation. 24%: 8 equally weighted in-class labs - 4% for each lab. 20%: 5 equally weighted homework assignments – 4% for each assignment. 25%: 2 midterm exams. 15%: Final Project - project proposal (1.5%). Milestone check (3%). Project demonstration and presentation (6%). Final project report and revised code (4.5%).  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     In-class labs All labs are to be done individually, in class, with the assistance of the instructor. Each assignment will be given near the beginning of a class and must be uploaded to Canvas before the due time. Some of the labs allow for late submission till midnight with late penalty, but no submission is allowed beyond the lab day. To receive full credit, a programming assignment must have no code exceptions, but partial credit will be awarded based on the understanding of the material demonstrated by the student’s code.\nHomework Assignments All homework assignments have to be completed individually in this course. Homework assignments are meant to be more comprehensive tasks that may need additional reading and research. Homework assignments are to be completed in a week or two.\nLate Policy\nLate assignment will lose points per day, including weekends and holidays. For example, -1 after 1 day, -2 after 2 days, -4 after 3 days … until 8+ days students will receive 0 score. Under no circumstances should any student disclose their code, or copy the code written by other students or from an outside source. Both students will receive 0 score on the disclosed/copied assignment.\nPaper Reading Assignment \u0026amp; Paper Presentation Presenting data analysis results to public is one of the highly sought skills from data science employers.\nStudents are required to form a team of two and read at least one technical paper from the provided paper list (or other papers agreed by the instructor). Students need to complete 1) an individual paper reading assignment in the middle of the semester; and 2) team-present the paper to the instructor and their peers during the end of the semester. The grading of the paper presentation consists of 50% from peers and 50% from the instructor. The evaluation rubrics will be provided via Canvas.\nFinal Project The final project best demonstrates students’ understanding of the lecture contents and their capability of solving real data science problems. Students are encouraged to form teams of no more than 2 people. A single solo project is allowed if class size is odd. Topics of the final project are left open for the teams to find, but the final choice has to be decided upon the instructor’s agreement. A good list of potential projects can be found at Kaggle and Public Datasets. Teams are responsible for finding the project of their interest and discussing the project feasibility face-to-face with the project manager, a.k.a., the instructor 1 week before the project proposal is due. Project formation is on a rolling basis, meaning formerly finalized projects cannot be taken again by another team. The grading of the final project consists of four major aspects:\n 10%: the project proposal (including the conversation with the instructor a week before due); 20%: mid-term project check (must have shown substantial exploratory data analysis); 40%: the project demonstration; code and slides are due the night before the presentation day; 30%: everything else including report; revised code and the report are due on the last day of the final exam week.  The requirements and grading rubric for each component of the project will be posted on Canvas. Under no circumstances should any student copy the code from an outside source. Source code similarity tools will be used to detect plagiarism.\nNote:\nThere is a potential pitfall of using open datasets to introduce data science that some students want to leverage. I want to be crystal clear that the point of this project is to learn as much as possible. The point of this project is not to achieve the most intriguing results on the Kaggle leaderboard. For instance, if you copied some code you didn't understand and used it to get very compelling analytical results, I would consider this a very poor project. However, if you thoughtfully try various strategies, incorporate lots of interesting learning resources, and do a good job communicating with your peers regarding what worked and what didn't, I would consider that highly successful even if your results were not the best.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"daf568e7b110b2a65f9c40802937394f","permalink":"https://Peilong.github.io/courses/cs250/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs250/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 6% : A number of in-class pop quizzes. 5% : Individual paper reading assignment. 5% : Team paper presentation. 24%: 8 equally weighted in-class labs - 4% for each lab. 20%: 5 equally weighted homework assignments – 4% for each assignment. 25%: 2 midterm exams. 15%: Final Project - project proposal (1.","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 6% : A number of in-class pop quizzes. 24%: 8 take-home quizzes. 5%: Individual paper reading assignment. 5% : Team paper presentation - peer evaluation (50%), instructor evaluation (50%). 25%: 4 individual homework. 25%: 2 midterm exams. 15%: Final Project - project proposal (10%). Milestone check (20%). Project demonstration and presentation (40%). Final project report and revised code (30%).  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     Individual Homework All homework assignments have to be completed individually in this course. Homework assignments are meant to be more comprehensive tasks that may need additional reading and research. Homework assignments are to be completed in a week or two.\nLate Policy\nLate assignment will lose points per day, including weekends and holidays. For example, -1 after 1 day, -2 after 2 days, -4 after 3 days … until 8+ days students will receive 0 score. Under no circumstances should any student disclose their code, or copy the code written by other students or from an outside source. Both students will receive 0 score on the disclosed/copied assignment.\nTake-home Quizzes Similar to homework, all take-home quizzes are to be done individually, out of class. Take-home quizzes are mini assignments that can be completed within 80 minutes, however, a whole week is granted to complete the task. Each quiz will be given on the Monday of a \u0026ldquo;quiz week\u0026rdquo;, and must be completed within 7 days. Unlike homework, no late submission is allowed beyond the due date. Students are responsible for attempting the quiz earlier on the quiz week to prepare questions during the Tue/Thur lecture time.\nPaper Reading Assignment \u0026amp; Paper Presentation Presenting data analysis results to public is one of the highly sought skills from data science employers.\nStudents are required to form a team of two and read at least one technical paper from the provided paper list (or other papers agreed by the instructor). Students need to complete 1) an individual paper reading assignment in the middle of the semester; and 2) team-present the paper to the instructor and their peers during the end of the semester. The grading of the paper presentation consists of 50% from peers and 50% from the instructor. The evaluation rubrics will be provided via Canvas.\nFinal Project The final project best demonstrates students’ understanding of the lecture contents and their capability of solving real data science problems. Students are encouraged to form teams of no more than 2 people. A single solo project is allowed if class size is odd. Topics of the final project are left open for the teams to find, but the final choice has to be decided upon the instructor’s agreement. A good list of potential projects can be found at:\n Kaggle Papers with Code UCI Machine Learning Repo Hugging Face Google Dataset Search  Teams are responsible for finding the project of their interest and discussing the project feasibility face-to-face with the project manager, a.k.a., the instructor 1 week before the project proposal is due. Project formation is on a rolling basis, meaning formerly finalized projects cannot be taken again by another team. The grading of the final project consists of four major aspects:\n 10%: the project proposal (including the conversation with the instructor a week before due); 20%: mid-term project check (must have shown substantial exploratory data analysis); 40%: the project demonstration; code and slides are due the night before the presentation day; 30%: everything else including report; revised code and the report are due on the last day of the final exam week.  The requirements and grading rubric for each component of the project will be posted on Canvas. Under no circumstances should any student copy the code from an outside source. Source code similarity tools will be used to detect plagiarism.\nNote:\nThere is a potential pitfall of using open datasets to introduce data science that some students want to leverage. I want to be crystal clear that the point of this project is to learn as much as possible. The point of this project is not to achieve the most intriguing results on the Kaggle leaderboard. For instance, if you copied some code you didn't understand and used it to get very compelling analytical results, I would consider this a very poor project. However, if you thoughtfully try various strategies, incorporate lots of interesting learning resources, and do a good job communicating with your peers regarding what worked and what didn't, I would consider that highly successful even if your results were not the best.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"c6b720c4008034b89f0d5907e46ea5b9","permalink":"https://Peilong.github.io/courses/cs350/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs350/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 6% : A number of in-class pop quizzes. 24%: 8 take-home quizzes. 5%: Individual paper reading assignment. 5% : Team paper presentation - peer evaluation (50%), instructor evaluation (50%). 25%: 4 individual homework. 25%: 2 midterm exams. 15%: Final Project - project proposal (10%). Milestone check (20%). Project demonstration and presentation (40%).","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 4% : A number of in-class pop quizzes. 24%: 6 take-home quizzes. 7% : Paper reading and lecture presentation. 20%: 5 individual homework. 25%: 2 midterm exams. 20%: Final Project - project proposal (10%); Milestone 1 (15%); Milestone 2 (15%); SCAD Day Presentation (20%); Final presentation (20%). Final project report and revised code (20%).  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     Individual Homework All homework assignments have to be completed individually in this course. Homework assignments are meant to be more comprehensive tasks that may need additional reading and research. Homework assignments are to be completed in a week or two.\nLate Policy\nLate assignment will lose points per day, including weekends and holidays. For example, -1 after 1 day, -2 after 2 days, -4 after 3 days … until 8+ days students will receive 0 score. Under no circumstances should any student disclose their code, or copy the code written by other students or from an outside source. Both students will receive 0 score on the disclosed/copied assignment.\nTake-home Quizzes Similar to homework, all take-home quizzes are to be done individually, out of class. Take-home quizzes are mini assignments that can be completed within 80 minutes, however, a whole week is granted to complete the task. Each quiz will be given on the Monday of a \u0026ldquo;quiz week\u0026rdquo;, and must be completed within 7 days. Unlike homework, no late submission is allowed beyond the due date. Students are responsible for attempting the quiz earlier on the quiz week to prepare questions during the Tue/Thur lecture time.\nIndividual Lecture Presentation Students are required to read a designated paper from the given paper list and present it as a course lecture. The presentation time is 30 minutes and students need to cover all important aspects from the paper. A live demo must be presented to illustrate the presented concept. The presenters will receive evaluations from all their peers and the instructor, and a weighted score will be given to the presenters.\nFinal Project The final project best demonstrates students’ understanding of the lecture contents and their capability of solving real data science problems. Students are encouraged to form teams of no more than 2 people. A single solo project is allowed if class size is odd. Topics of the final project are left open for the teams to find, but the final choice has to be decided upon the instructor’s agreement. A good list of potential projects can be found at:\n Kaggle Papers with Code UCI Machine Learning Repo Hugging Face Google Dataset Search  Teams are responsible for finding the project of their interest and discussing the project feasibility face-to-face with the project manager, a.k.a., the instructor 1 week before the project proposal is due. Project formation is on a rolling basis, meaning formerly finalized projects cannot be taken again by another team. The grading of the final project consists of four major aspects:\n 10%: the project proposal (including the conversation with the instructor a week before due); 20%: milestone 1 (must have shown substantial exploratory data analysis); 20%: milestone 2 (data modeling and evaluations are done); 30%: the project demonstration; code and slides are due the night before the presentation day; 20%: everything else including revised code and the final report is due on the last day of the final exam week.  The requirements and grading rubric for each component of the project will be posted on Canvas. Under no circumstances should any student copy the code from an outside source. Source code similarity tools will be used to detect plagiarism.\nNote:\nThere is a potential pitfall of using open datasets to introduce data science that some students want to leverage. I want to be crystal clear that the point of this project is to learn as much as possible. The point of this project is not to achieve the most intriguing results on the Kaggle leaderboard. For instance, if you copied some code you didn't understand and used it to get very compelling analytical results, I would consider this a very poor project. However, if you thoughtfully try various strategies, incorporate lots of interesting learning resources, and do a good job communicating with your peers regarding what worked and what didn't, I would consider that highly successful even if your results were not the best.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"489b666e05713431aafab2bf98f96b51","permalink":"https://Peilong.github.io/courses/cs354/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs354/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 4% : A number of in-class pop quizzes. 24%: 6 take-home quizzes. 7% : Paper reading and lecture presentation. 20%: 5 individual homework. 25%: 2 midterm exams. 20%: Final Project - project proposal (10%); Milestone 1 (15%); Milestone 2 (15%); SCAD Day Presentation (20%); Final presentation (20%). Final project report and revised code (20%).","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 5%: X in-class pop quizzes 25%: 5 in-class labs 10%: Lecture presentation 20%: 4 individual homework 25%: 2 midterm exams 15%: Final project  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     In-class Labs in a Team All labs are to be done in class, with the assistance of the instructor. Students are encouraged to form a team of two to solve the lab assignments together. Each assignment will be given near the beginning of a class and must be uploaded to Canvas before the due time. Some of the labs allow for late submission till midnight with late penalty, but no submission is allowed beyond the lab day. To receive full credits, a programming assignment must compile, but partial credit will be awarded based on the understanding of the material demonstrated by the student’s code.\nIndividual Homework All homework assignments have to be completed individually in this course. Homework assignments are often more comprehensive tasks that may need additional reading and research. Homework assignments are to be completed in a week or two.\nLate Policy\nLate assignment will lose points per day, including weekends and holidays. For example, -1 after 1 day, -2 after 2 days, -4 after 3 days … until 8+ days students will receive 0 score. Under no circumstances should any student disclose their code, or copy the code written by other students or from an outside source. Both students will receive 0 score on the disclosed/copied assignment.\nIndividual Lecture Presentation Students are required to read a designated chapter from the V. Cryptography module of the textbook and present it as a course lecture. The presentation time is 25-30 minutes and students need to cover all discussed topics from the textbook. The presenters will receive a written evaluation from all their peers and the instructor, and a weighted score (50% from the peers; 50% from the instructor) will be given to the presenters.\nFinal Team Project To work on the final project, students are required to form a team of two. Topics of the final project should be one from the SEED labs in the categories of (1) Computer Security; (2) Web Security; and (3) Cryptography.\nThe grading of the final project consists of four major aspects:\n 10%: the project proposal (including the conversation with the instructor a week before due date); 20%: project milestone check and demonstration (must have completed at least 1 task); 40%: the project demonstration; 30%: everything including revised code and the final report are due on the last day of the final exam week.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"ea6daeaa5863874f68871a5b59e7b61b","permalink":"https://Peilong.github.io/courses/cs363/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs363/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 5%: X in-class pop quizzes 25%: 5 in-class labs 10%: Lecture presentation 20%: 4 individual homework 25%: 2 midterm exams 15%: Final project  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     In-class Labs in a Team All labs are to be done in class, with the assistance of the instructor.","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 4%: X in-class pop quizzes 16%: 4 in-class labs 10%: Lecture presentation 20%: 4 individual homework 30%: 2 midterm exams 20%: Final project  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     In-class Labs in a Team All labs are to be done in class, with the assistance of the instructor. Students are encouraged to form a team of two to solve the lab assignments together. Each assignment will be given near the beginning of a class and must be uploaded to Canvas before the due time. Some of the labs allow for late submission till midnight with late penalty, but no submission is allowed beyond the lab day. To receive full credits, a programming assignment must compile, but partial credit will be awarded based on the understanding of the material demonstrated by the student’s code.\nIndividual Homework All homework assignments have to be completed individually in this course. Homework assignments are often more comprehensive tasks that may need additional reading and research. Homework assignments are to be completed in a week or two.\nLate Policy\nLate assignment will lose points per day, including weekends and holidays. For example, -1 after 1 day, -2 after 2 days, -4 after 3 days … until 8+ days students will receive 0 score. Under no circumstances should any student disclose their code, or copy the code written by other students or from an outside source. Both students will receive 0 score on the disclosed/copied assignment.\nIndividual Lecture Presentation Students are required to read a designated chapter from the textbook and present it as a course lecture. The presentation time is 25-30 minutes and students need to cover all discussed topics from the textbook. The presenters will receive a written evaluation from all their peers and the instructor, and a weighted score (50% from the peers; 50% from the instructor) will be given to the presenters.\nFinal Team Project To work on the final project, students are required to form a team of two. Topics of the final project should be one from the SEED labs in the categories of firewall, VPN and DNS.\nThe grading of the final project consists of four major aspects:\n 10%: the project proposal (including the conversation with the instructor a week before due date); 20%: project milestone check and demonstration (must have completed at least 1 task); 40%: the project demonstration; 30%: everything including revised code and the final report are due on the last day of the final exam week.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"9ad5b8283f994a68ad33bfa55822770f","permalink":"https://Peilong.github.io/courses/cs364/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs364/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 4%: X in-class pop quizzes 16%: 4 in-class labs 10%: Lecture presentation 20%: 4 individual homework 30%: 2 midterm exams 20%: Final project  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59     In-class Labs in a Team All labs are to be done in class, with the assistance of the instructor.","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 20%: Project proposal 10%: Milestone 1 10%: Milestone 2 10%: Milestone 3 30%: Final project 20%: Final paper  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59    Grades for the proposal, milestones, final project, and final paper will be recorded in Canvas (https://etown.instructure.com/). Students may compute their current average by using these scores with the weights listed above.\nProposal All work is individual in this course. Each student, working with the instructor, will formulate the outline of a project. The plan for this project including goals should be written up and presented as a formal proposal due on the date specified in the course schedule. It should be turned in as a Word, LaTex, or PDF file and uploaded into Canvas before 11:59pm on the due day.\nMilestones After the project has been proposed and approved, each student will have to present a document and give an oral presentation for each of three milestones. The document should be turned in as a Word, LaTeX, or PDF file. This document should be included in a zip file that also contains appropriate code. This zip file should be uploaded into Canvas before 11:59pm on the due date.\n   Milestone Content     1 Required hardware and software    Desired features    Expected timeline   2 Implementation of essential features    Working code    Evidence of good software engineering and design   3 Final features (no features should be added after Milestone 3)    Testing and debugging plan    Final Project and Paper A working version of the source code will be submitted by compressing it in a zip file and uploading that file onto Canvas before 11:59pm on the final project due date. Likewise, a paper of at least 8 pages (2,000 words) describing the purpose of the project, previous work done in the area, implementation details, successes, failures, and potential future work should be submitted. It should be turned in as a Word, LaTex, or PDF file and uploaded into Canvas before 11:59pm on the final project due date.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"efc344ed4bb8d2ee2b99698bcae6e9f4","permalink":"https://Peilong.github.io/courses/cs400/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs400/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 20%: Project proposal 10%: Milestone 1 10%: Milestone 2 10%: Milestone 3 30%: Final project 20%: Final paper  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59    Grades for the proposal, milestones, final project, and final paper will be recorded in Canvas (https://etown.","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 20%: Project proposal 10%: Milestone 1 10%: Milestone 2 10%: Milestone 3 30%: Final project 20%: Final paper  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59    Grades for the proposal, milestones, final project, and final paper will be recorded in Canvas (https://etown.instructure.com/). Students may compute their current average by using these scores with the weights listed above.\nProposal All work is individual in this course. Each student, working with the instructor, will formulate the outline of a project. The plan for this project including goals should be written up and presented as a formal proposal due on the date specified in the course schedule. It should be turned in as a Word, LaTex, or PDF file and uploaded into Canvas before 11:59pm on the due day.\nMilestones After the project has been proposed and approved, each student will have to present a document and give an oral presentation for each of three milestones. The document should be turned in as a Word, LaTeX, or PDF file. This document should be included in a zip file that also contains appropriate code. This zip file should be uploaded into Canvas before 11:59pm on the due date.\n   Milestone Content     1 Required hardware and software    Desired features    Expected timeline   2 Implementation of essential features    Working code    Evidence of good software engineering and design   3 Final features (no features should be added after Milestone 3)    Testing and debugging plan    Final Project and Paper A working version of the source code will be submitted by compressing it in a zip file and uploading that file onto Canvas before 11:59pm on the final project due date. Likewise, a paper of at least 8 pages (2,000 words) describing the purpose of the project, previous work done in the area, implementation details, successes, failures, and potential future work should be submitted. It should be turned in as a Word, LaTex, or PDF file and uploaded into Canvas before 11:59pm on the final project due date.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"cbf052e64e965cccf913367208d21407","permalink":"https://Peilong.github.io/courses/cs495/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs495/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 20%: Project proposal 10%: Milestone 1 10%: Milestone 2 10%: Milestone 3 30%: Final project 20%: Final paper  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59    Grades for the proposal, milestones, final project, and final paper will be recorded in Canvas (https://etown.","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 20%: Project proposal 10%: Milestone 1 10%: Milestone 2 10%: Milestone 3 30%: Final project 20%: Final paper  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59    Grades for the proposal, milestones, final project, and final paper will be recorded in Canvas (https://etown.instructure.com/). Students may compute their current average by using these scores with the weights listed above.\nProposal All work is individual in this course. Each student, working with the instructor, will formulate the outline of a project. The plan for this project including goals should be written up and presented as a formal proposal due on the date specified in the course schedule. It should be turned in as a Word, LaTex, or PDF file and uploaded into Canvas before 11:59pm on the due day.\nMilestones After the project has been proposed and approved, each student will have to present a document and give an oral presentation for each of three milestones. The document should be turned in as a Word, LaTeX, or PDF file. This document should be included in a zip file that also contains appropriate code. This zip file should be uploaded into Canvas before 11:59pm on the due date.\n   Milestone Content     1 Dataset collection, preprocessing, and exploratory data analysis    Models to be implemented and results to be presented    Expected timeline   2 Continued exploratory data analysis with visuals for demo    Feature study and feature extraction    Model implementation and scoring    Parameter tuning to obtain optimal model performance   3 Final application design with detailed use cases    Models comparison within the project and with literatures    Future works    Final Project and Paper A working version of the source code will be submitted by compressing it in a zip file and uploading that file onto Canvas before 11:59pm on the final project due date. Likewise, a paper of at least 8 pages (2,000 words) describing the purpose of the project, previous work done in the area, implementation details, successes, failures, and potential future work should be submitted. It should be turned in as a Word, LaTex, or PDF file and uploaded into Canvas before 11:59pm on the final project due date.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"b2af7a042340b920a8daa30e1df017ac","permalink":"https://Peilong.github.io/courses/ds400/grading/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ds400/grading/","section":"courses","summary":"Grading Weights The final grade for this course depends upon the grades and scores earned on course components weighted as follows:\n 20%: Project proposal 10%: Milestone 1 10%: Milestone 2 10%: Milestone 3 30%: Final project 20%: Final paper  Grades will be computed by rounding numerical percentages to the nearest integer and applying the following table:\n   Letter Range Letter Range Letter Range     A 93-100 B- 80-82 D+ 67-69   A- 90-92 C+ 77-79 D 63-66   B+ 87-89 C 73-76 D- 60-62   B 83-86 C- 70-72 F 0-59    Grades for the proposal, milestones, final project, and final paper will be recorded in Canvas (https://etown.","tags":null,"title":"Grading Policies","type":"docs"},{"authors":null,"categories":null,"content":"Code Grading rubrics for code submission in terms of percentage:\n100%:  Functionality: For assignments that have well-specified behavior, the code should be able to pass (or very nearly pass, e.g. there may be minor output formatting issues) automated unit testing of all required features. For open-ended assignments the code must be easy to run without modification and implement all of the required functionality. Documentation: all functions are commented with appropriate doc strings. For open-ended assignments there is a README file discussing how to run the program and what it is supposed to do. Style: the program exhibits effective modular design. The code does not have unnecessary cut and paste code or magic numbers. Variable and function names are sensibly chosen.  80%:  Functionality: For assignments that have well-specified behavior, the code should implement all of the required functionality. For this grade, it is possible that 10-20% of the functionality may be broken. For open-ended assignments it will be possible to get the code running with modest effort (i.e. it will not be as well documented as in a 5, but it isn’t too hard to intuit how the code works). For these types of assignments all required features must be present, however, some (10-20%) may not be functioning properly or otherwise poorly implemented. Documentation: some functions are missing doc strings. Comments are fairly minimal. Style: some aspects of the design of the program could be improved to reduce cut and paste code. Variable and function names are for the most part well-chosen.  60%:  Functionality: The code should implement almost all of the required features (it is okay if roughly 20% are not implemented). A significant portion, 30-50%, of the code may not work as it is supposed to. Documentation: Docstrings are mostly absent For well-defined assignments the code does not run as it should based on the assignment spec. For open-ended assignments there may not be any indication of how to run the program, and it is not easy for a NINJA to figure out how the code works (a good test is if you have to e-mail someone to ask them how their code runs, they are probably at this level). Style: the program design needs improvement. The code would be a lot cleaner if the author had done a better job thinking through the appropriate functional decomposition. The code has lots of cut and paste and magic numbers. Variable and function names are hard to interpret.  40%:  Functionality: the assignment is incomplete (~50% of the functionality is not implemented). The functionality that is implemented is not 100% correct. Documentation: mostly absent. Style: design is poor. Very little attention has been paid to choosing a sensible functional decomposition. Variable and function names are chosen almost arbitrarily.  20%:  Functionality: only minimal functionality is present. Documentation: little or none. Style: Code is not “readable”. Poor choice of variable and function names.  0%:  nothing turned in.  Notebook Assignments Jupyter notebooks are the files you need to submit for labs and homework assignments.\n100%: Thorough engagement with each section of the reading. Each exercise has either been completed, or you have articulated a well-thought out set of questions for each of the problems you didn\u0026rsquo;t answer. Points will be deducted from 100% for the following reasons:\n Exercises are not filled out (either with a solution or a question) The answer to the exercise does not demonstrate a good faith attempt to complete it.  Writing Writing will be evaluated for clarity, concision, and comprehensiveness. The particular style that you should use will depend on the assignment and your audience. The bottom line is don\u0026rsquo;t cut corners with writing in this class. Your ability to communicate what you have done is just as important as what you have done. Don\u0026rsquo;t make the mistake of spending all of your time writing code, and then rush through the writing parts of the assignment. See below for some stylistic guidance.\n Since the dawn of time, college students have been writing introductions that are too grandiose (and often false). Just get into it; you don\u0026rsquo;t have to zoom in from space (and make stuff up). Write the abstract last and summarize the most important result. The passive voice is a hoax. Please write in the first person (singular or plural). Write in the present tense whenever possible. Some actions happen in the past, but all research exists in an eternal present: \u0026ldquo;Using data from BRFSS, they plot weight versus height and find that tall respondents are heavier, on average, than shorter respondents. Our results are consistent with this conclusion.\u0026rdquo; When you edit, try to remove words. Avoid using \u0026ldquo;significant\u0026rdquo; unless you mean \u0026ldquo;statistically significant;\u0026rdquo; a good alternative is \u0026ldquo;substantial.\u0026rdquo; Avoid using \u0026ldquo;correlation\u0026rdquo; unless you mean a coefficient of correlation. In general, there might be a \u0026ldquo;relationship\u0026rdquo; between variables and you might characterize it with a correlation. \u0026ldquo;Trend\u0026rdquo; usually means something is changing in time; \u0026ldquo;pattern\u0026rdquo; is more general. Provide indicators of logical flow. If I ask you to answer a set of question in your report, don\u0026rsquo;t just paste the questions as your section headings. You should create your own document structure based on what makes sense for your project. Explain your motivation. Avoid \u0026ldquo;We were interested\u0026rdquo; and \u0026ldquo;We wanted\u0026rdquo; as pseudo-motivation. And don\u0026rsquo;t look at the camera; that is, don\u0026rsquo;t use \u0026ldquo;because we were told to\u0026rdquo; as motivation, and avoid \u0026ldquo;for this project\u0026rdquo;. When you refer to figures and tables, capitalize \u0026ldquo;Figure\u0026rdquo; and \u0026ldquo;Table.\u0026rdquo; Formal figures have a number and a caption, and they can float. Informal figures are part of the text flow. If a figure doesn\u0026rsquo;t contain much information, summarize it in text. Find an authorial voice that is casual enough to be engaging (without overdoing it).  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6e93854046fc2f4ca4e980dc0d88d5f0","permalink":"https://Peilong.github.io/courses/cs250/rubrics/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs250/rubrics/","section":"courses","summary":"Code Grading rubrics for code submission in terms of percentage:\n100%:  Functionality: For assignments that have well-specified behavior, the code should be able to pass (or very nearly pass, e.g. there may be minor output formatting issues) automated unit testing of all required features. For open-ended assignments the code must be easy to run without modification and implement all of the required functionality. Documentation: all functions are commented with appropriate doc strings.","tags":null,"title":"Grading Rubrics","type":"docs"},{"authors":null,"categories":null,"content":"Code Grading rubrics for code submission in terms of percentage:\n100%:  Functionality: For assignments that have well-specified behavior, the code should be able to pass (or very nearly pass, e.g. there may be minor output formatting issues) automated unit testing of all required features. For open-ended assignments the code must be easy to run without modification and implement all of the required functionality. Documentation: all functions are commented with appropriate doc strings. For open-ended assignments there is a README file discussing how to run the program and what it is supposed to do. Style: the program exhibits effective modular design. The code does not have unnecessary cut and paste code or magic numbers. Variable and function names are sensibly chosen.  80%:  Functionality: For assignments that have well-specified behavior, the code should implement all of the required functionality. For this grade, it is possible that 10-20% of the functionality may be broken. For open-ended assignments it will be possible to get the code running with modest effort (i.e. it will not be as well documented as in a 5, but it isn’t too hard to intuit how the code works). For these types of assignments all required features must be present, however, some (10-20%) may not be functioning properly or otherwise poorly implemented. Documentation: some functions are missing doc strings. Comments are fairly minimal. Style: some aspects of the design of the program could be improved to reduce cut and paste code. Variable and function names are for the most part well-chosen.  60%:  Functionality: The code should implement almost all of the required features (it is okay if roughly 20% are not implemented). A significant portion, 30-50%, of the code may not work as it is supposed to. Documentation: Docstrings are mostly absent For well-defined assignments the code does not run as it should based on the assignment spec. For open-ended assignments there may not be any indication of how to run the program, and it is not easy for a NINJA to figure out how the code works (a good test is if you have to e-mail someone to ask them how their code runs, they are probably at this level). Style: the program design needs improvement. The code would be a lot cleaner if the author had done a better job thinking through the appropriate functional decomposition. The code has lots of cut and paste and magic numbers. Variable and function names are hard to interpret.  40%:  Functionality: the assignment is incomplete (~50% of the functionality is not implemented). The functionality that is implemented is not 100% correct. Documentation: mostly absent. Style: design is poor. Very little attention has been paid to choosing a sensible functional decomposition. Variable and function names are chosen almost arbitrarily.  20%:  Functionality: only minimal functionality is present. Documentation: little or none. Style: Code is not “readable”. Poor choice of variable and function names.  0%:  nothing turned in.  Notebook Assignments Jupyter notebooks are the files you need to submit for labs and homework assignments.\n100%: Thorough engagement with each section of the reading. Each exercise has either been completed, or you have articulated a well-thought out set of questions for each of the problems you didn\u0026rsquo;t answer. Points will be deducted from 100% for the following reasons:\n Exercises are not filled out (either with a solution or a question) The answer to the exercise does not demonstrate a good faith attempt to complete it.  Writing Writing will be evaluated for clarity, concision, and comprehensiveness. The particular style that you should use will depend on the assignment and your audience. The bottom line is don\u0026rsquo;t cut corners with writing in this class. Your ability to communicate what you have done is just as important as what you have done. Don\u0026rsquo;t make the mistake of spending all of your time writing code, and then rush through the writing parts of the assignment. See below for some stylistic guidance.\n Since the dawn of time, college students have been writing introductions that are too grandiose (and often false). Just get into it; you don\u0026rsquo;t have to zoom in from space (and make stuff up). Write the abstract last and summarize the most important result. The passive voice is a hoax. Please write in the first person (singular or plural). Write in the present tense whenever possible. Some actions happen in the past, but all research exists in an eternal present: \u0026ldquo;Using data from BRFSS, they plot weight versus height and find that tall respondents are heavier, on average, than shorter respondents. Our results are consistent with this conclusion.\u0026rdquo; When you edit, try to remove words. Avoid using \u0026ldquo;significant\u0026rdquo; unless you mean \u0026ldquo;statistically significant;\u0026rdquo; a good alternative is \u0026ldquo;substantial.\u0026rdquo; Avoid using \u0026ldquo;correlation\u0026rdquo; unless you mean a coefficient of correlation. In general, there might be a \u0026ldquo;relationship\u0026rdquo; between variables and you might characterize it with a correlation. \u0026ldquo;Trend\u0026rdquo; usually means something is changing in time; \u0026ldquo;pattern\u0026rdquo; is more general. Provide indicators of logical flow. If I ask you to answer a set of question in your report, don\u0026rsquo;t just paste the questions as your section headings. You should create your own document structure based on what makes sense for your project. Explain your motivation. Avoid \u0026ldquo;We were interested\u0026rdquo; and \u0026ldquo;We wanted\u0026rdquo; as pseudo-motivation. And don\u0026rsquo;t look at the camera; that is, don\u0026rsquo;t use \u0026ldquo;because we were told to\u0026rdquo; as motivation, and avoid \u0026ldquo;for this project\u0026rdquo;. When you refer to figures and tables, capitalize \u0026ldquo;Figure\u0026rdquo; and \u0026ldquo;Table.\u0026rdquo; Formal figures have a number and a caption, and they can float. Informal figures are part of the text flow. If a figure doesn\u0026rsquo;t contain much information, summarize it in text. Find an authorial voice that is casual enough to be engaging (without overdoing it).  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"6d21b3222cd53c25661c17dc32236ebc","permalink":"https://Peilong.github.io/courses/cs350/rubrics/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs350/rubrics/","section":"courses","summary":"Code Grading rubrics for code submission in terms of percentage:\n100%:  Functionality: For assignments that have well-specified behavior, the code should be able to pass (or very nearly pass, e.g. there may be minor output formatting issues) automated unit testing of all required features. For open-ended assignments the code must be easy to run without modification and implement all of the required functionality. Documentation: all functions are commented with appropriate doc strings.","tags":null,"title":"Grading Rubrics","type":"docs"},{"authors":null,"categories":null,"content":"Code Grading rubrics for code submission in terms of percentage:\n100%:  Functionality: For assignments that have well-specified behavior, the code should be able to pass (or very nearly pass, e.g. there may be minor output formatting issues) automated unit testing of all required features. For open-ended assignments the code must be easy to run without modification and implement all of the required functionality. Documentation: all functions are commented with appropriate doc strings. For open-ended assignments there is a README file discussing how to run the program and what it is supposed to do. Style: the program exhibits effective modular design. The code does not have unnecessary cut and paste code or magic numbers. Variable and function names are sensibly chosen.  80%:  Functionality: For assignments that have well-specified behavior, the code should implement all of the required functionality. For this grade, it is possible that 10-20% of the functionality may be broken. For open-ended assignments it will be possible to get the code running with modest effort (i.e. it will not be as well documented as in a 5, but it isn’t too hard to intuit how the code works). For these types of assignments all required features must be present, however, some (10-20%) may not be functioning properly or otherwise poorly implemented. Documentation: some functions are missing doc strings. Comments are fairly minimal. Style: some aspects of the design of the program could be improved to reduce cut and paste code. Variable and function names are for the most part well-chosen.  60%:  Functionality: The code should implement almost all of the required features (it is okay if roughly 20% are not implemented). A significant portion, 30-50%, of the code may not work as it is supposed to. Documentation: Docstrings are mostly absent For well-defined assignments the code does not run as it should based on the assignment spec. For open-ended assignments there may not be any indication of how to run the program, and it is not easy for a NINJA to figure out how the code works (a good test is if you have to e-mail someone to ask them how their code runs, they are probably at this level). Style: the program design needs improvement. The code would be a lot cleaner if the author had done a better job thinking through the appropriate functional decomposition. The code has lots of cut and paste and magic numbers. Variable and function names are hard to interpret.  40%:  Functionality: the assignment is incomplete (~50% of the functionality is not implemented). The functionality that is implemented is not 100% correct. Documentation: mostly absent. Style: design is poor. Very little attention has been paid to choosing a sensible functional decomposition. Variable and function names are chosen almost arbitrarily.  20%:  Functionality: only minimal functionality is present. Documentation: little or none. Style: Code is not “readable”. Poor choice of variable and function names.  0%:  nothing turned in.  Notebook Assignments Jupyter notebooks are the files you need to submit for labs and homework assignments.\n100%: Thorough engagement with each section of the reading. Each exercise has either been completed, or you have articulated a well-thought out set of questions for each of the problems you didn\u0026rsquo;t answer. Points will be deducted from 100% for the following reasons:\n Exercises are not filled out (either with a solution or a question) The answer to the exercise does not demonstrate a good faith attempt to complete it.  Writing Writing will be evaluated for clarity, concision, and comprehensiveness. The particular style that you should use will depend on the assignment and your audience. The bottom line is don\u0026rsquo;t cut corners with writing in this class. Your ability to communicate what you have done is just as important as what you have done. Don\u0026rsquo;t make the mistake of spending all of your time writing code, and then rush through the writing parts of the assignment. See below for some stylistic guidance.\n Since the dawn of time, college students have been writing introductions that are too grandiose (and often false). Just get into it; you don\u0026rsquo;t have to zoom in from space (and make stuff up). Write the abstract last and summarize the most important result. The passive voice is a hoax. Please write in the first person (singular or plural). Write in the present tense whenever possible. Some actions happen in the past, but all research exists in an eternal present: \u0026ldquo;Using data from BRFSS, they plot weight versus height and find that tall respondents are heavier, on average, than shorter respondents. Our results are consistent with this conclusion.\u0026rdquo; When you edit, try to remove words. Avoid using \u0026ldquo;significant\u0026rdquo; unless you mean \u0026ldquo;statistically significant;\u0026rdquo; a good alternative is \u0026ldquo;substantial.\u0026rdquo; Avoid using \u0026ldquo;correlation\u0026rdquo; unless you mean a coefficient of correlation. In general, there might be a \u0026ldquo;relationship\u0026rdquo; between variables and you might characterize it with a correlation. \u0026ldquo;Trend\u0026rdquo; usually means something is changing in time; \u0026ldquo;pattern\u0026rdquo; is more general. Provide indicators of logical flow. If I ask you to answer a set of question in your report, don\u0026rsquo;t just paste the questions as your section headings. You should create your own document structure based on what makes sense for your project. Explain your motivation. Avoid \u0026ldquo;We were interested\u0026rdquo; and \u0026ldquo;We wanted\u0026rdquo; as pseudo-motivation. And don\u0026rsquo;t look at the camera; that is, don\u0026rsquo;t use \u0026ldquo;because we were told to\u0026rdquo; as motivation, and avoid \u0026ldquo;for this project\u0026rdquo;. When you refer to figures and tables, capitalize \u0026ldquo;Figure\u0026rdquo; and \u0026ldquo;Table.\u0026rdquo; Formal figures have a number and a caption, and they can float. Informal figures are part of the text flow. If a figure doesn\u0026rsquo;t contain much information, summarize it in text. Find an authorial voice that is casual enough to be engaging (without overdoing it).  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"9ec2e6e1e12b70e7055f56bff14cc74e","permalink":"https://Peilong.github.io/courses/cs354/rubrics/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs354/rubrics/","section":"courses","summary":"Code Grading rubrics for code submission in terms of percentage:\n100%:  Functionality: For assignments that have well-specified behavior, the code should be able to pass (or very nearly pass, e.g. there may be minor output formatting issues) automated unit testing of all required features. For open-ended assignments the code must be easy to run without modification and implement all of the required functionality. Documentation: all functions are commented with appropriate doc strings.","tags":null,"title":"Grading Rubrics","type":"docs"},{"authors":null,"categories":null,"content":"Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 01/16/2023\n   Week Activities Notes     1 Literature search, Finalize topic with the instructor Mon: Start proposal   2 Proposal write-up Mon: create Github repository   3 Write software feature specifications Mon: Github commit 1   4 Feature 1 implementation Mon: Start Milestone 1, Proposal Due   5 Feature 1 implementation Mon: Github commit 2   6 Feature 2 implementation Mon: Github commit 3   7 Feature 2 implementation Mon: Start Milestone 2, Milestone 1 Due   8 Spring break, no classes    9 Feature 3 implementation Mon: Github commit 4   10 Feature 3 implementation Mon: Github commit 5   11 Design revision Mon: Start Milestone 3, Milestone 2 Due, mid-term demo during the week   12 Design revision Mon: Github commit 6   13 Testing and debugging Mon: Github commit 7   14 Final paper write-up Mon: Start final paper, Milestone 3 Due   15 Final presentation Tue: Present on SCAD Day   16 Code cleanup, packaging, and publishing Mon: Github commit 8   17 Revise the project with instructor feedback Mon: Final paper and code Due    ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"f73dc1feb6393cd9c2a4c526c4c9b15c","permalink":"https://Peilong.github.io/courses/cs400/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs400/schedule/","section":"courses","summary":"Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 01/16/2023\n   Week Activities Notes     1 Literature search, Finalize topic with the instructor Mon: Start proposal   2 Proposal write-up Mon: create Github repository   3 Write software feature specifications Mon: Github commit 1   4 Feature 1 implementation Mon: Start Milestone 1, Proposal Due   5 Feature 1 implementation Mon: Github commit 2   6 Feature 2 implementation Mon: Github commit 3   7 Feature 2 implementation Mon: Start Milestone 2, Milestone 1 Due   8 Spring break, no classes    9 Feature 3 implementation Mon: Github commit 4   10 Feature 3 implementation Mon: Github commit 5   11 Design revision Mon: Start Milestone 3, Milestone 2 Due, mid-term demo during the week   12 Design revision Mon: Github commit 6   13 Testing and debugging Mon: Github commit 7   14 Final paper write-up Mon: Start final paper, Milestone 3 Due   15 Final presentation Tue: Present on SCAD Day   16 Code cleanup, packaging, and publishing Mon: Github commit 8   17 Revise the project with instructor feedback Mon: Final paper and code Due    ","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Note this tentative schedule is subject to change. Please check the schedule regularly.\n   Week Starting Activities Notes     1 8/24/20 Literature search, Finalize topic with instructor Mon: Start proposal   2 8/31/20 Proposal write-up    3 9/7/20 Overall design Mon: Start Mileston 1, Proposal Due   4 9/14/20 Concrete feature design    5 9/21/20 Finalized design    6 9/28/20 Implementation 25% Mon: Start Mileston 2, Milestone 1 Due   7 10/5/20 Implementation 50%    8 10/12/20 Implementation 75%    9 10/19/20 Implementation 100%    10 10/26/20 Additional features Mon: Start Mileston 3, Milestone 2 Due, mid-term demo during the week   11 11/2/20 Additional features    12 11/9/20 Write up testing and debugging plan    13 11/16/20 Final paper writeup, testing and debugging Mon: Start final paper, Milestone 3 Due   14 11/23/20 Testing and debugging    15 11/30/20 Final presentation Schedule a presentation time with instructor during the week   16 12/7/20 Revise project with instructor feedback Mon: Paper and Project Due    ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"b3cb50dbdaa182e346d60247c5aacbd6","permalink":"https://Peilong.github.io/courses/cs495/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs495/schedule/","section":"courses","summary":"Note this tentative schedule is subject to change. Please check the schedule regularly.\n   Week Starting Activities Notes     1 8/24/20 Literature search, Finalize topic with instructor Mon: Start proposal   2 8/31/20 Proposal write-up    3 9/7/20 Overall design Mon: Start Mileston 1, Proposal Due   4 9/14/20 Concrete feature design    5 9/21/20 Finalized design    6 9/28/20 Implementation 25% Mon: Start Mileston 2, Milestone 1 Due   7 10/5/20 Implementation 50%    8 10/12/20 Implementation 75%    9 10/19/20 Implementation 100%    10 10/26/20 Additional features Mon: Start Mileston 3, Milestone 2 Due, mid-term demo during the week   11 11/2/20 Additional features    12 11/9/20 Write up testing and debugging plan    13 11/16/20 Final paper writeup, testing and debugging Mon: Start final paper, Milestone 3 Due   14 11/23/20 Testing and debugging    15 11/30/20 Final presentation Schedule a presentation time with instructor during the week   16 12/7/20 Revise project with instructor feedback Mon: Paper and Project Due    ","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Note this tentative schedule is subject to change. Please check the schedule regularly. Last Updated: 01/17/2023\n   Week Activities Notes     1 Literature search, Finalize topic with instructor Mon: Start proposal   2 Proposal write-up Mon: create Github repository   3 Data collection and preprocessing Mon: Github commit 1   4 Exploratory data analysis Mon: Start Milestone 1, Proposal Due   5 Start model design Mon: Github commit 2   6 Feature extraction Mon: Github commit 3   7 Model implementation Mon: Start Milestone 2, Milestone 1 Due   8 Spring break, no classes    9 Model implementation and training Mon: Github commit 4   10 Parameter tuning Mon: Github commit 5   11 Application design and use cases Mon: Start Milestone 3, Milestone 2 Due, mid-term demo during the week   12 Model evaluation and comparison Mon: Github commit 6   13 Code final revision Mon: Github commit 7   14 Final paper writeup Mon: Start final paper, Milestone 3 Due   15 Final presentation Tue: Present on SCAD Day   16 Code cleanup, packaging, and publishing Mon: Github commit 8   17 Revise the project with instructor feedback Mon: Final paper and code Due    ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"a0167281d2fab5bc3da8f96ab1910cf9","permalink":"https://Peilong.github.io/courses/ds400/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ds400/schedule/","section":"courses","summary":"Note this tentative schedule is subject to change. Please check the schedule regularly. Last Updated: 01/17/2023\n   Week Activities Notes     1 Literature search, Finalize topic with instructor Mon: Start proposal   2 Proposal write-up Mon: create Github repository   3 Data collection and preprocessing Mon: Github commit 1   4 Exploratory data analysis Mon: Start Milestone 1, Proposal Due   5 Start model design Mon: Github commit 2   6 Feature extraction Mon: Github commit 3   7 Model implementation Mon: Start Milestone 2, Milestone 1 Due   8 Spring break, no classes    9 Model implementation and training Mon: Github commit 4   10 Parameter tuning Mon: Github commit 5   11 Application design and use cases Mon: Start Milestone 3, Milestone 2 Due, mid-term demo during the week   12 Model evaluation and comparison Mon: Github commit 6   13 Code final revision Mon: Github commit 7   14 Final paper writeup Mon: Start final paper, Milestone 3 Due   15 Final presentation Tue: Present on SCAD Day   16 Code cleanup, packaging, and publishing Mon: Github commit 8   17 Revise the project with instructor feedback Mon: Final paper and code Due    ","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 08/21/2023\n   Week Starting Topics Reading Notes     1 8/21/23 M: Lec1 - Course Intro \u0026amp; Computer Science       W: Lec2 - Demo of Course Tools \u0026amp; First Program Week1-1      F: Lec3 - Values, Data Types and Operations Week1-2    2 8/28/23 M: Lec4 - Function Calls \u0026amp; Type Conversion Functions Week2-1      W: Lec5 - Variables \u0026amp; Input, Lab 1 - Variables and I/O Week2-2      F: Dr. Li on Travel - Complete Lab 1 with TA Week2-3    3 9/4/23 M: Labor Day - No Class       W: Lec6 - Debut of Turtle \u0026amp; OOP Concepts Week3-1 Wed: Project 1 out.     F: Lec7 - A Herd of Turtles \u0026amp; More Turtle Methods Week3-2    4 9/11/23 M: Lec8 - Repetition with a for Loop Week4-1      W: Lec9 - Boolean Expressions, Logical Operators Week4-2      F: Lab 2 - Conditions and Repetitions Week4-3    5 9/18/23 M: Lec10 - Conditional Execution Week5-1      W: Lec11 - The Listener Loop: while Loops Week5-2 Wed: Project 1 due. Project 2 out.     F: Lec12 - Functions (1) Week5-3    6 9/25/23 M: Lec13 - Functions (2) Week6-1      W: PE1 - Loops and Functions Week6-2      F: Lab 3 - Functions Week 6-3    7 10/2/23 M: Lab Test 1       W: Midterm Exam       F: Fall Break - No Class     8 10/9/23 M: Lec14 - Strings Week8-1      W: Lec15 - Tuples and Lists Week8-2 Wed: Project 2 due. Project 3 out.     F: Lec16 - Dictionaries Week8-3    9 10/16/23 M: Lec17 - Iterations Week9-1      W: Lec18 - Accumulation Week9-2      F: PE2 - Data Structures Week9-3    10 10/23/23 M: Lec19 - OOP Classes and Objects. Week10-1      W: Lec20 - Instance methods Week10-2      F: Lab 4 - Data Structures Week10-3    11 10/30/23 M: Lec21 - Class attribute and class methods Week11-1      W: Lec22 - Class customization Week11-2 Wed: Project 3 due. Project 4 out.     F: PE3 - OOP Week11-3    12 11/6/23 M: Lab 5 - OOP Week12-1      W: PE4 - OOP and Data Structures Week12-2      F: Lab Test 2     13 11/13/23 M: Lec23 - Python for Data Science and AI Week13-1      W: Lec24 - Pandas DataFrame Week13-2 Wed: Project 4 due. Project 5 out.     F: Lec25 - DataFrame Operations Week13-3    14 11/20/23 M: Lec26 - Data Visualization Week14-1      W: PE5 - Pandas Week14-2      F: Thanksgiving Break - No Class     15 11/27/23 M: Lab 6 - Pandas All      W: Course Review All      F: Final Exam Q\u0026amp;A All Fri: Project 5 due.   16 12/4/23 M: Final Exam: 7:30-10:30 AM       W: Good luck with your finals       F: Good luck with your finals      ","date":1628463600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1628463600,"objectID":"60cf7f783cbcc3817c8fc36c578f7f8a","permalink":"https://Peilong.github.io/courses/cs121/schedule/","publishdate":"2021-08-09T00:00:00+01:00","relpermalink":"/courses/cs121/schedule/","section":"courses","summary":"Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 08/21/2023\n   Week Starting Topics Reading Notes     1 8/21/23 M: Lec1 - Course Intro \u0026amp; Computer Science       W: Lec2 - Demo of Course Tools \u0026amp; First Program Week1-1      F: Lec3 - Values, Data Types and Operations Week1-2    2 8/28/23 M: Lec4 - Function Calls \u0026amp; Type Conversion Functions Week2-1      W: Lec5 - Variables \u0026amp; Input, Lab 1 - Variables and I/O Week2-2      F: Dr.","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Specifications For details, please refer to Proposal Requirements.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"58d120147ae3c8443696f3b3afd5653f","permalink":"https://Peilong.github.io/courses/cs400/proposal/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs400/proposal/","section":"courses","summary":"Specifications For details, please refer to Proposal Requirements.","tags":null,"title":"Proposal Requirements","type":"docs"},{"authors":null,"categories":null,"content":"Specifications For details, please refer to Proposal Requirements.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"b8baa86861196035b2cd01c6117edfc6","permalink":"https://Peilong.github.io/courses/cs495/proposal/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs495/proposal/","section":"courses","summary":"Specifications For details, please refer to Proposal Requirements.","tags":null,"title":"Proposal Requirements","type":"docs"},{"authors":null,"categories":null,"content":"Specifications For details, please refer to Proposal Requirements.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"e3035bcdda36cd7d306e867d82c89753","permalink":"https://Peilong.github.io/courses/ds400/proposal/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/ds400/proposal/","section":"courses","summary":"Specifications For details, please refer to Proposal Requirements.","tags":null,"title":"Proposal Requirements","type":"docs"},{"authors":null,"categories":null,"content":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 04/29/2021\n   Week Starting Topics Reading Notes     1 1/25/21 T: Lec1 - Course introduction Reading 1 HW1 out.     R: Lec2 - Power and Beauty     2 2/1/21 T: Lec3 - Debut of turtle \u0026ldquo;JJ\u0026rdquo; Reading 2 HW1 due Mon.     R: Lec4 - Repeated Moves - for loops     3 2/8/21 T: Lec5 - Prompt Me - Variables and Input Reading 3 HW2 out.     R: Lab 1     4 2/15/21 T: Lec6: A Mouthful of Commands - Functions Reading 4 Project 1 out.     R: Lec7: More on Functions     5 2/22/21 T: Lec8: To Be Or Not To Be - if Conditionals Reading 5 HW2 due Mon.     R: Lec9: Watchman Sentinel - while loops     6 3/1/21 T: Lab 2 Reading 6 HW3 out.     R: Lec10: Putting It All Together     7 3/8/21 T: Lab 3 Reading 7      R: Midterm Review     8 3/15/21 T: Midterm Exam Reading 8 HW3 due Mon.     R: Lec11: Midterm, Homewor, Porject Review     9 3/22/21 T: Lec12: Python Data Structures - Strings Reading 9 Project 1 due, and HW4 out.     R: Study Break - No Class     10 3/29/21 T: Lec13: Python Data Structures - List, Dict, Tuples Reading 10      R: Lab4     11 4/5/21 T: Lec14: Pandas - DataFrames Reading 11 HW4 due Mon; HW5 out; Project 2 out     R: Lec15: Pandas - DataFrame Operations     12 4/12/21 T: Lec16: Pandas - DataFrame Operations (cont.) Reading 12      R: Lec17: Pandas Built-in Data Visualization     13 4/19/21 T: Scholarship Day - No Class Reading 13 HW5 due Mon     R: Lec18: Data Visualization using Seaborn     14 4/26/21 T: Lec19: Pandas Exercises Reading 14      R: Lab 5     15 5/3/21 T: Lec20: Course Summary       R: No class     16 5/10/21 Final Exam: Wed 5/12, 2:30 - 5:30 PM  Project 2 due Mon.           Weekly Reading Assignments    Week # Reading # Assignments     1 Reading 1 Ch 1.1-1.8, Turtle1 \u0026lt;\u0026ndash; Create an account to access   2 Reading 2 Turtle2   3 Reading 3 Ch 4.1 - 4.7, Ch 3.3 - 3.6   4 Reading 4 Turtle3, Turtle4   5 Reading 5 Ch 3.7 - 3.13, Turtle5   6 Reading 6 Turtle6   7 Reading 7 Ch 5.1 - 5.10, Ch 6.1 - 6.2   8 Reading 8 Ch 7.1 - 7.10   9 Reading 9 Ch 7.11 - 7.15, groupby   10 Reading 10 concat, merge, Pandas I/O, Missing Data   11 Reading 11 Pandas Visualization, Seaborn   12 Reading 12 Web Scraping   13 Reading 13 Ch 12.1 - 12.3   14 Reading 14 All notes    ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"e099e260f961d989adca08b1e508e646","permalink":"https://Peilong.github.io/courses/cs113/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs113/schedule/","section":"courses","summary":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 04/29/2021\n   Week Starting Topics Reading Notes     1 1/25/21 T: Lec1 - Course introduction Reading 1 HW1 out.     R: Lec2 - Power and Beauty     2 2/1/21 T: Lec3 - Debut of turtle \u0026ldquo;JJ\u0026rdquo; Reading 2 HW1 due Mon.     R: Lec4 - Repeated Moves - for loops     3 2/8/21 T: Lec5 - Prompt Me - Variables and Input Reading 3 HW2 out.","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 08/24/2024\n   Week Starting Topics Reading Notes     1 8/26/24 M: Lec1 - Course Intro \u0026amp; Java Language       W: Lec2 - Data Types \u0026amp; Variables Week1-1      F: Lec3 - Decisions Week1-2    2 9/2/24 M: Labor Day, No Classes  Mon: HW1 out.     W: Lec4 - Loops Week2-1      F: Lec5 - Methods Week2-2    3 9/9/24 M: PE 1 Week3-1      W: Lab 1 Week3-2      F: Lec6 - 1D and 2D Arrays Week3-3    4 9/16/24 M: Lec7 - Array Lists Week4-1 Mon: HW1 due; Project 1 out     W: Lec8 - I/O and Exception Week4-2      F: Lec9 - Objects and Classes Week4-3    5 9/23/24 M: Lec10 - Inheritance Week5-1 Mon: HW2 out     W: Lec11 - Interfaces Week5-2      F: Lec12 - GUI Week5-3    6 9/30/24 M: PE 2 Week6-1      W: Lab 2 Week6-2      F: Lab Test 1     7 10/7/24 M: Exam 1 Preview Week7-1 Mon: HW2 due     W: Exam 1       F: Fall Break, No Classes     8 10/14/24 M: Lec13 - Tank World Phase 1 Week8-1 Mon: Project 1 due; Project 2 out     W: Lec14 - Advanced GUI Week8-2      F: Lec15 - Object-oriented Design Week8-3    9 10/21/24 M: Lec16 - Recursion Week9-1 Mon: HW3 out     W: Lec17 - Recursion Examples Week9-2      F: Lec18 - Sorting Week9-3    10 10/28/24 M: Lec19 - Searching Week10-1      W: PE 3 Week10-2      F: Lab 3 Week10-3    11 11/4/24 M: Lec20 - Tank World Phase 2 and Multithreading Week11-1 Mon: Project 2 due; Project 3 out     W: Lec21 - Synchronization Week11-2      F: Lec22 - Avoiding Deadlocks Week11-3    12 11/11/24 M: PE 4 Week12-1 Mon: HW3 due; HW4 out     W: Lab 4 Week12-2      F: Lab Test 2     13 11/18/24 M: Lec23 - Java Collections Week13-1      W: Lec24 - Linked Lists Week13-2      F: Lec25 - Sets and Maps Week13-3    14 11/25/24 M: Lec26 - Choosing a Collection Week14-1 Mon: HW 4 due     W: Virtual Day - Project 3 Q\u0026amp;A Week14-2      F: Thanksgiving Break     15 12/2/24 M: Exam 2 Preview  Mon: Project 3 due     W: Exam 2       F: Final Exam Preview     16 12/9/24 M: No Class       W: No Class       F: Final Exam      ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"28b9beaa827467701855101276e06941","permalink":"https://Peilong.github.io/courses/cs122/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs122/schedule/","section":"courses","summary":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 08/24/2024\n   Week Starting Topics Reading Notes     1 8/26/24 M: Lec1 - Course Intro \u0026amp; Java Language       W: Lec2 - Data Types \u0026amp; Variables Week1-1      F: Lec3 - Decisions Week1-2    2 9/2/24 M: Labor Day, No Classes  Mon: HW1 out.","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 01/18/2023\n   Week Starting Topics Reading Notes     1 1/15/24 M: MLK Day, No Classes  Tue: HW1 out     W: Lec1 - Course introduction; Google Cloud intro  Thur: HW1 due     F: Lec2 - Unix and Linux; Command line interface Week 1-1    2 1/22/24 M: Lec3 - C language; Compilation in Linux Week 2-1 Mon: Project 1 out     W: Lec4 - Data Types; Systems programming Week 2-2      F: Lec5 - printf and scanf; Linux Kernel Week 2-3    3 1/29/24 M: Lec6 - If and switch statements Week 3-1 Mon: HW2 out     W: PE1 - Flowchart and debugging Week 3-2      F: Lab1 Week 3-3    4 2/5/24 M: Lec7 - Writing a Makefile Week 4-1      W: Lec8 - While and do-while loops Week 4-2      F: Lec9 - For loops Week 4-3    5 2/12/24 M: PE2 - Conditionals and loops Week 5-1 Mon: HW2 due     W: Lab2 Week 5-2      F: Lec10 - Functions Week 5-3    6 2/19/24 M: Lec11 - Function exercises Week 6-1 Mon: Project 1 due     W: Lec12 - Module 1 summary \u0026amp; exam 1 preview Week 6-2      F: Exam 1     7 2/26/24 M: Lec13 - Cloud computing and containerization Week 7-1 Mon: Project 2 out     W: Lec14 - Docker exercises Week 7-2      F: Lec15 - Pointers and pointer arguments Week 7-3    8 3/4/24 M: Spring Break; No Classes       W: Spring Break; No Classes       F: Spring Break; No Classes     9 3/11/24 M: PE3 - Functions and pointers Week 9-1 Mon: HW 3 out     W: Lab3 Week 9-2      F: Lec16 - C arrays Week 9-3    10 3/18/24 M: Lec17 - 2D arrays; arrays with functions Week 10-1      W: Lec18 - Character arrays and strings Week 10-2      F: Lec19 - Structures Week 10-3    11 3/25/24 M: Lec20 - Nested structures Week 11-1 Mon: HW 3 due     W: PE4 - Structures Week 11-2      F: College Holiday, No Classes     12 4/1/24 M: Lab4 Week 12-1 Mon: Project 2 due     W: Lec21 - Module 2 summary \u0026amp; exam 2 preview Week 12-2      F: Exam 2     13 4/8/24 F: Lec22 - Dynamic Memory Allocation (DMA) Week 13-1 Mon: Project 3 out     M: Lec23: DMA examples Week 13-2      W: Lec24: Linked list part 1 Week 13-3    14 4/15/24 M: Lec25: Linked list part 2; PE5 start Week 14-1 Mon: HW 4 out     W: PE5 - DMA Week 14-2      F: Lab5 Week 14-3    15 4/22/24 M: Lec26 - File I/O Week 15-1      W: Lec27 - Character and line I/O Week 15-2      F: Lec28 - Bitwise operation Week 15-3    16 4/29/23 M: Lec29 - Course review and final exam preview  Mon: HW 4 due     W: Final exam Q\u0026amp;A       F: No class     17 5/6/23 M: No class  Mon: Project 3 due     Tue 5/7: Final exam 7:30 - 10:30 AM       F: Enjoy your summer break!      ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"9e3c6c7f8c882e8caa7f8e84e9d155af","permalink":"https://Peilong.github.io/courses/cs222/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs222/schedule/","section":"courses","summary":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 01/18/2023\n   Week Starting Topics Reading Notes     1 1/15/24 M: MLK Day, No Classes  Tue: HW1 out     W: Lec1 - Course introduction; Google Cloud intro  Thur: HW1 due     F: Lec2 - Unix and Linux; Command line interface Week 1-1    2 1/22/24 M: Lec3 - C language; Compilation in Linux Week 2-1 Mon: Project 1 out     W: Lec4 - Data Types; Systems programming Week 2-2      F: Lec5 - printf and scanf; Linux Kernel Week 2-3    3 1/29/24 M: Lec6 - If and switch statements Week 3-1 Mon: HW2 out     W: PE1 - Flowchart and debugging Week 3-2      F: Lab1 Week 3-3    4 2/5/24 M: Lec7 - Writing a Makefile Week 4-1      W: Lec8 - While and do-while loops Week 4-2      F: Lec9 - For loops Week 4-3    5 2/12/24 M: PE2 - Conditionals and loops Week 5-1 Mon: HW2 due     W: Lab2 Week 5-2      F: Lec10 - Functions Week 5-3    6 2/19/24 M: Lec11 - Function exercises Week 6-1 Mon: Project 1 due     W: Lec12 - Module 1 summary \u0026amp; exam 1 preview Week 6-2      F: Exam 1     7 2/26/24 M: Lec13 - Cloud computing and containerization Week 7-1 Mon: Project 2 out     W: Lec14 - Docker exercises Week 7-2      F: Lec15 - Pointers and pointer arguments Week 7-3    8 3/4/24 M: Spring Break; No Classes       W: Spring Break; No Classes       F: Spring Break; No Classes     9 3/11/24 M: PE3 - Functions and pointers Week 9-1 Mon: HW 3 out     W: Lab3 Week 9-2      F: Lec16 - C arrays Week 9-3    10 3/18/24 M: Lec17 - 2D arrays; arrays with functions Week 10-1      W: Lec18 - Character arrays and strings Week 10-2      F: Lec19 - Structures Week 10-3    11 3/25/24 M: Lec20 - Nested structures Week 11-1 Mon: HW 3 due     W: PE4 - Structures Week 11-2      F: College Holiday, No Classes     12 4/1/24 M: Lab4 Week 12-1 Mon: Project 2 due     W: Lec21 - Module 2 summary \u0026amp; exam 2 preview Week 12-2      F: Exam 2     13 4/8/24 F: Lec22 - Dynamic Memory Allocation (DMA) Week 13-1 Mon: Project 3 out     M: Lec23: DMA examples Week 13-2      W: Lec24: Linked list part 1 Week 13-3    14 4/15/24 M: Lec25: Linked list part 2; PE5 start Week 14-1 Mon: HW 4 out     W: PE5 - DMA Week 14-2      F: Lab5 Week 14-3    15 4/22/24 M: Lec26 - File I/O Week 15-1      W: Lec27 - Character and line I/O Week 15-2      F: Lec28 - Bitwise operation Week 15-3    16 4/29/23 M: Lec29 - Course review and final exam preview  Mon: HW 4 due     W: Final exam Q\u0026amp;A       F: No class     17 5/6/23 M: No class  Mon: Project 3 due     Tue 5/7: Final exam 7:30 - 10:30 AM       F: Enjoy your summer break!","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 08/24/2022\n   Week Starting Topics Reading Notes     1 8/26/24 M: Lec1: Course introduction  Mon: HW1 out.     W: Lec2: Introduction to data science Week 01-1      F: Lec3: Review Python for data science Week 01-2    2 9/2/24 M: Labor Day, No Classes       W: Lec4: Numpy arrays and array indexing Week 02-1      F: Lec5: Numpy array operations Week 02-2    3 9/9/24 M: Lab1: Numpy Week 03-1 Mon: HW 1 due; HW2 out;     W: Lec6: Pandas - Series and DataFrame Week 03-2 Mon: Team formation due     F: Lec7: Pandas - groupby, concat, merge Week 03-3    4 9/16/24 M: Lec8: Pandas - IO and methods Week 04-1 Mon: Paper reading open.     W: PE1: Pandas exercises Week 04-2      F: Lab2: Pandas Week 04-3    5 9/23/24 M: Lec9: Data visualization - Matplotlib, Pandas Week 05-1 Mon: HW2 due; HW3 out.     W: Lec10: Data visualization - Seaborn Week 05-2      F: Lec11: Data visualization - Plotly Week 05-3    6 9/30/24 M: Lab3: Visualization Week 06-1 Mon: Project proposal due.     W: Lec12: Basic statistics Week 06-2      F: Lec13: More on Statistics and probability Week 06-3    7 10/7/24 M: Lec14: Module 1 summary and exam 1 preview Week 07-1      W: Exam 1       F: Fall Break, No Classes     8 10/14/24 M: Lec15: Intro to machine learning Week 08-1 Mon: HW3 due.     W: Lec16: Linear regression Week 08-1      F: PE2: Linear regression exercises Week 08-3    9 10/21/24 M: Lec17: Logistic regression Part 1 Week 09-1 Mon: Paper reading due; HW4 out.     W: Lec18: Logistic regression Part 2 Week 09-2      F: Lec19: K nearest neighbors Week 09-3    10 10/28/24 M: PE3: Classification Week 10-1 Fri: Project milestone due.     W: Lab4: Classification Week 10-2      F: Lec20: K-means clustering Week 10-3    11 11/4/24 M: PE3: K-means exercises Week 11-1 Mon: HW4 due; HW5 out.     W: Lab5: Clustering Week 11-2      F: Lec21: Dimensionality reduction Week 11-3    12 11/11/24 M: PE4: PCA Week 12-1 Mon: Paper presentation due.     W: Paper presentation group 1 Week 12-2      F: Paper presentation group 2 Week 12-3    13 11/18/24 M: Lec22: Support vector machine Week 13-1      W: PE5: SVM Week 13-2      F: Lab6: SVM Week 13-3    14 11/25/24 M: Exam 2  Mon: HW5 due.     W: Virtual Day - Project update and discussion       F: Thanksgiving Break, No Classes     15 12/2/24 M: Project presentation group 1  Mon: Project presentation slides due at noon.     W: Project presentation group 2       F: Project presentation group 3     16 12/9/24 M: No Classes       W: No Classes       Thursday: 2:30-5:30 PM, Project presentation backup day  Thurs: Project final paper and code due at midnight.    ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"4f5f835f33f3c6d1da15e117e318e5bd","permalink":"https://Peilong.github.io/courses/cs250/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs250/schedule/","section":"courses","summary":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 08/24/2022\n   Week Starting Topics Reading Notes     1 8/26/24 M: Lec1: Course introduction  Mon: HW1 out.     W: Lec2: Introduction to data science Week 01-1      F: Lec3: Review Python for data science Week 01-2    2 9/2/24 M: Labor Day, No Classes       W: Lec4: Numpy arrays and array indexing Week 02-1      F: Lec5: Numpy array operations Week 02-2    3 9/9/24 M: Lab1: Numpy Week 03-1 Mon: HW 1 due; HW2 out;     W: Lec6: Pandas - Series and DataFrame Week 03-2 Mon: Team formation due     F: Lec7: Pandas - groupby, concat, merge Week 03-3    4 9/16/24 M: Lec8: Pandas - IO and methods Week 04-1 Mon: Paper reading open.","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast Updated: 08/24/2024\n   Week Starting Topics Reading Notes     1 8/26/24 T: Lec1 - Course introduction and data mining Ch. 1 Mon: HW1 out     H: Lec2 - Data and data warehousing     2 9/2/24 T: Lec3 - Data Preprocessing Ch. 2      H: PE1 - Data Preprocessing Exercises     3 9/9/24 T: Lec4 - Classification Part 1 Ch. 5 Mon: HW1 due; HW2 out; Quiz 1 out     H: Lec5 - Classification Part 2     4 9/16/24 T: PE2 - Classification Exercises Ch. 6 Mon: Paper reading open; Quiz 2 out     H: Lec6 - Ensemble techniques     5 9/23/24 T: PE3 - Ensemble Techniques Exercises Ch. 7 Mon: HW2 due; Quiz 3 out     H: Lec7 - Deep learning \u0026amp; ANN     6 9/30/24 T: PE4 - ANN Ch. 10 Mon: Project proposal due; Quiz 4 out     H: Lec8 - CNN     7 10/7/24 T: PE5 - CNN Exercises Ch. 11 Mon: HW2 due; Quiz 5 out     H: Fall Break, No Classes     8 10/14/24 T: Exam 1 Ch. 14 Mon: HW3 out     H: Lec9 - Clustering     9 10/21/24 T: PE6 - Clustering Exercises Ch. 9 Mon: Paper reading due; Quiz 6 out     H: Lec10 - NLP     10 10/28/24 T: Lec11 - LLM  Mon: HW3 due     H: PE7 - NLP  Fri: Project milestone due.   11 11/4/24 T: Lec12 - Dimensionality Reduction Ch. 8 Mon: HW 4 out; Quiz 7 out     H: PE8 - PCA Exercises     12 11/11/24 T: Paper Presentation Group 1  Mon: Paper Presentation due     H: Paper Presentation Group 2     13 11/18/24 T: Lec13 - Association Rule Learning Medium Article * Mon: HW4 due; Quiz 8 out     H: PE9 - ARL Exercises     14 11/25/24 T: Exam 2       H: Thanksgiving Break, No Classes  Sun: Final Project Due   15 12/2/24 T: Final Project Presentation Group 1  Mon: Project presentation slides due     H: Final Project Presentation Group 2     16 12/9/24 T: No Classes       H: 11-2PM: Final Project Presentation Group 3 (if needed)  Thur: Revised code and final paper due    * Medium Article\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"fe315ff385272959dff3b9382e1018bd","permalink":"https://Peilong.github.io/courses/cs350/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs350/schedule/","section":"courses","summary":"Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast Updated: 08/24/2024\n   Week Starting Topics Reading Notes     1 8/26/24 T: Lec1 - Course introduction and data mining Ch. 1 Mon: HW1 out     H: Lec2 - Data and data warehousing     2 9/2/24 T: Lec3 - Data Preprocessing Ch. 2      H: PE1 - Data Preprocessing Exercises     3 9/9/24 T: Lec4 - Classification Part 1 Ch.","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast Updated: 04/09/2022\n   Week Starting Topics Reading Notes     1 1/16/23 T: Lec1 - Course introduction; Intro to Big Data Reading1_Hadoop Mon: HW1 out.     H: Lec2 - Hadoop Ecosystem     2 1/23/23 T: Lec3 - HDFS Reading2_HDFS Mon: HW1 due.     H: Lec4 - MapReduce     3 1/30/23 T: PE1 - MapReduce Exercise Reading3_MR Mon: Quiz 1 week; HW 2 out; Team formation due.     H: Lec5 - Apache Pig     4 2/6/23 T: PE2 - Pig Exercise Reading4_Pig Mon: Quiz 2 week.     H: Lec6 - NoSQL (Paper 1 Presentation)     5 2/13/23 T: Lec7 - Hbase (Paper 2 Presentation) Paper1 \u0026amp; Paper2 Mon: HW2 due; HW3 out; Finalize project topic and dataset.     H: Lec8 - MongoDB     6 2/20/23 T: Exam 1 Paper3_Spark      H: Lec9 - Intro to Apache Spark (Paper 3 Presentation)     7 2/27/23 T: Lec10 - Spark RDD (Paper 4 Presentation) Paper4_RDD, LS Ch.3 Mon: HW3 due. Final project proposal due     H: Lec11 - Spark DataFrame     8 3/6/23 T: Spring Break, No Classes       H: Spring Break, No Classes     9 3/13/23 T: PE3 - Spark DataFrame Exercise Paper5_Mllib, LS Ch.4 Mon: Quiz 3 week; HW4 out     H: Lec12 - Spark Machine Learning (Paper 5 Presentation)     10 3/20/23 T: PE4 - Spark Linear Regression Exercise LS Ch.10      H: Lec13 - Spark Logistic Regression     11 3/27/23 T: Lec14 - Spark Tree Classifiers LS Ch.11 Mon: Project milestone 1 due (50% work done)     H: PE5 - Spark Trees     12 4/3/23 T: Lec15 - Spark K-Means LS Ch.7 Mon: Quiz 4 week     H: Exam 2     13 4/10/23 T: Lec16 - Intro to NLP Reading5_NLP Mon: HW4 due     H: Lec17 - NLP by example     14 4/17/23 T: Lec18 - NLP with Spark LS Ch.8 Mon: Quiz 5 week     H: Lec19 - Apache Kafka  Fri: Project milestone 2 due (90% work done)   15 4/24/23 T: Scholarship Day, Student Presentation Spark Document Mon: HW5 out, SCAD slides due     H: Lec20 - Spark Streaming  Tue: Present at SCAD Day   16 5/1/23 T: PE6 - Data Streaming  Mon: Quiz 6 week     H: Reading Day, No Classes     17 5/8/23 T: Work on Final Project Report  Mon: Final presentation and demo code due     H: Have a great summer!  Wed: Final report and revised code due; HW5 due    Reading List  Textbook \u0026ldquo;Learning Spark, 2nd Edition\u0026rdquo; (Short name: LS): Link Reading1_Hadoop: Link Reading2_HDFS: Link Reading3_MR: Link Reading4_Pig: Link Reading5_NLP: Link Paper1_NoSQL: Link Paper2_Hbase: Link Paper3_Spark: Link Paper4_RDD: Link Paper5_MLlib: Link  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"f1c439a8acffa651df510637c13403e8","permalink":"https://Peilong.github.io/courses/cs354/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs354/schedule/","section":"courses","summary":"Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast Updated: 04/09/2022\n   Week Starting Topics Reading Notes     1 1/16/23 T: Lec1 - Course introduction; Intro to Big Data Reading1_Hadoop Mon: HW1 out.     H: Lec2 - Hadoop Ecosystem     2 1/23/23 T: Lec3 - HDFS Reading2_HDFS Mon: HW1 due.     H: Lec4 - MapReduce     3 1/30/23 T: PE1 - MapReduce Exercise Reading3_MR Mon: Quiz 1 week; HW 2 out; Team formation due.","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 08/21/2023\n   Week Starting Topics Reading Notes     1 8/21/23 M: Lec1 - Course introduction and computer security Ch 1 Mon: HW1 out     W: Lec2 - Security Basics \u0026amp; SEED environment       F: Lec3 - Linux commands for security     2 8/28/23 M: Lec4 - Web technology basics Ch 11      W: Lec5 - Advanced web technolgy       F: Dr. Li on Travel - No Class     3 9/4/23 M: Labor Day - No Class  Ch 12 Team formation due, Start project proposal writing     W: Lec6 - Cross-site request forgery (CSRF)       F: Lec7 - CSRF countermeasures     4 9/11/23 M: PE1 - CSRF Ch 13 Mon: HW1 due, HW2 out     W: Lab1 - CSRF       F: Lec8 - Cross-site scripting attack (XSS)     5 9/18/23 M: Lec9 - XSS Part 2 Ch 14      W: Lec10 - XSS countermeasures and generalization       F: PE2 - XSS     6 9/25/23 M: Lab2 - XSS Project chapters Mon: HW2 due, HW3 out     W: Lec11 - SQL Injection attack (SQLi)       F: PE3 - SQLi     7 10/2/23 M: Lab 3 - SQLi; Exam 1 preview Project chapters Mon: Project proposal due     W: Exam 1       F: Fall Break - No Class     8 10/9/23 M: Lec12 - Users, groups and access control list (ACL) Ch 2      W: Lec13 - Set-UID mechanism       F: Lec14 - Set-UID attack surface     9 10/16/23 M: Lec15 - Environment varialbes (ENV) attacks Ch 3 Mon: HW3 due, HW 4 out     W: Lec16 - ENV attack surface and case studies (Simon Burleson)       F: PE4 - Set-UID     10 10/23/23 M: Lab4 - Set-UID Ch 4      W: Lec17 - Buffer overflow (BOF) attack (Matt Sutton)       F: Lec18 - BOF countermeasures (Aiden Walmer)  Fri: Final project midterm check due   11 10/30/23 M: PE5 - Buffer overflow Ch 24 Mon: HW 4 due, HW 5 out     W: Lab5 - Buffer overflow       F: Module 2 summary; Exam 2 preview     12 11/6/23 M: Exam 2 Ch 25      W: Lec19 - Introduction to cryptography       F: Lec20 - Secret-key encryption (Anfal Al-Hussaini)     13 11/13/23 M: Lec21 - One-way hash function (Isabel Pacheco Mattivi) Ch 26 Mon: HW 5 due     W: Lec22 - Public-key cryptography (Phillip Goldberg)       F: Lec23 - Public-key infrastructure (Alex Fox)     14 11/20/23 M: Lec24 - TLS and HTTPS (Giovanni Raso) Ch 27      W: Lec25 - Blockchain and Bitcoin (Tyler Souders)       F: Thanksgiving Break - No Class     15 11/27/23 M: Project presentation group 1 Project chapters      W: Project presentation group 2       F: Project presentation group 3     16 12/4/23 M: Project presentation group 4 (if needed)         Fri: Final report and revised code due    ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"515edb504ebdc1bc90da225f1bf7995c","permalink":"https://Peilong.github.io/courses/cs363/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs363/schedule/","section":"courses","summary":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 08/21/2023\n   Week Starting Topics Reading Notes     1 8/21/23 M: Lec1 - Course introduction and computer security Ch 1 Mon: HW1 out     W: Lec2 - Security Basics \u0026amp; SEED environment       F: Lec3 - Linux commands for security     2 8/28/23 M: Lec4 - Web technology basics Ch 11      W: Lec5 - Advanced web technolgy       F: Dr.","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 01/18/2024\n   Week Starting Topics Reading Notes     1 1/15/24 M: MLK Day, No Classes IS: 1.1-1.4 or CIS 19.1-19.4      W: Lec1 - Course introduction and network security       F: Lec2 - SEED labs and Capture-the-flag     2 1/22/24 M: Lec3 - Networking basics IS: 1.5-1.8 or CIS: 19.5-19.8 Mon: HW1 out     W: Lec4 - Packet sniffing       F: Lab0 - Wireshark; Packet sniffing     3 1/29/24 M: Lec5 - Packet spoofing IS: 2.1-2.4      W: PE1 - Sniffing \u0026amp; Spoofing       F: Lab1 - Sniffing \u0026amp; Spoofing     4 2/5/24 M: Lec6 - MAC layer; ARP protocol IS: 2.5-2.7 Mon: HW1 due; HW2 out     W: Lec7 - ARP cache poisoning attack       F: Lec8 - MITM attack     5 2/12/24 M: PE2 - ARP IS: 3.1-3.3      W: Lab2 - ARP       F: Lec9 - Network layer; IP protocol     6 2/19/24 M: Lec10 - Attacks using IP fragmentation IS: 3.4-3.7 Mon: HW 2 due; HW3 out     W: Lec11 - Routing and spoofing prevention       F: Lec12 - ICMP protocol     7 2/26/24 M: Lec13 - Exam 1 Preview IS: 5.1-5.4      W: Exam 1 group 1       F: Exam 1 group 2     8 3/4/24 M: Spring Break; No Classes       W: Spring Break; No Classes       F: Spring Break; No Classes     9 3/11/24 M: Lec14 - CTF prep IS: 6.1-6.3 or CIS: 20.1-20.3 Mon: HW 3 duu; HW 4 out     W: Lec15 - Transport layer; TCP protocol       F: Lec16 - SYN flooding attack     10 3/18/24 M: Lec17 - TCP reset attack IS: 6.4-6.7 or CISS: 20.4-20.7      W: Lec18 - TCP session hijacking       F: Lec19 - Reverse shell     11 3/25/24 M: PE3 - TCP Presentation related      W: Lab3 - TCP       F: College Holiday, No Classes     12 4/1/24 M: Lec20 - Exam 2 Preview Presentation related Mon: HW4 due     W: Exam 2 group 1       F: Exam 2 group 2     13 4/8/24 F: Lec21 - Firewall Part 1 IS: 7.1-7.3 or CIS: 21.1-21.3 Mon: Lecture presentation due     M: Lec22 - Firewall Part 2 IS: 7.4-7.7 or CIS: 21.4-21.7      W: Lec23 - VPN Part 1 IS: 8.1-8.5 or CIS: 22.1-22.5    14 4/15/24 M: Lec24 - VPN Part 2 IS: 8.6-8.9 or CIS: 22.6-22.9      W: Lec25 - Tunneling IS: 9      F: Lec26 - DNS part 1 IS: 10.1-10.3 or CIS: 23.1-23.3    15 4/22/24 M: Lec27 - DNS part 2 IS: 10.4-10.7 or CIS: 23.4-23.7      W: Lec28 - DNS part 3 IS: 10.8-10.11 or CIS: 10.8-23.11      F: Final project group 1     16 4/29/23 M: Final project group 2       W: Final project group 3       F: No Class     17 5/6/23 M: 2:30-5:30 Final project group 4       W: Work on your final report       F: Work on youor final report  Fri: Final report due    Reading  IS Ch2: MAC and ARP. Link IS Ch3: IP and ICMP. Link IS Ch5: UDP. Link IS Ch9: IP Tunneling. Link  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"02f696bf02764bdd31b3e43478763674","permalink":"https://Peilong.github.io/courses/cs364/schedule/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs364/schedule/","section":"courses","summary":"Schedule Note this tentative schedule is subject to change. Please check the schedule regularly.\nLast updated: 01/18/2024\n   Week Starting Topics Reading Notes     1 1/15/24 M: MLK Day, No Classes IS: 1.1-1.4 or CIS 19.1-19.4      W: Lec1 - Course introduction and network security       F: Lec2 - SEED labs and Capture-the-flag     2 1/22/24 M: Lec3 - Networking basics IS: 1.","tags":null,"title":"Course Schedule","type":"docs"},{"authors":null,"categories":null,"content":"Anaconda Individual To install Python, you will need to install and play with Anaconda Individual Edition. It is a popular data science platform that consists of almost all the packages you will ever need in Python and R. Find the download link for your system from here. You must download the Python 3.x version.\nVisual Studio Code Visual Studio Code is a very charming and easy to use code editor. With the powerful Python extension, you can leverage it as a full-blown integrated development environment (IDE). Download it here and follow the instructions on homework 1.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"7010032ce241e7467944b8f9d3327f73","permalink":"https://Peilong.github.io/courses/cs113/software/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs113/software/","section":"courses","summary":"Anaconda Individual To install Python, you will need to install and play with Anaconda Individual Edition. It is a popular data science platform that consists of almost all the packages you will ever need in Python and R. Find the download link for your system from here. You must download the Python 3.x version.\nVisual Studio Code Visual Studio Code is a very charming and easy to use code editor. With the powerful Python extension, you can leverage it as a full-blown integrated development environment (IDE).","tags":null,"title":"Software","type":"docs"},{"authors":null,"categories":null,"content":"Skulpt An online Python interpreter for quick typing and note-taking. Available at: https://skulpt.org/using.html\nCS 121 Software Anaconda Individual The Python packages and environment that you need to install on your computer to execute Python programs.\nVisual Studio Code Our Integrated Development Environment (IDE) for writing Python scripts.\nThe installation guide for both software is provided on zyBook Chapter 1.6: Installing CS121 Software Tools.\nDownload Anaconda from: https://www.anaconda.com/products/individual Download VS Code from: https://code.visualstudio.com/download\nNote:\nAll the aforementioned software are available on the computers in the Esbenshade 281, Hoover 108 and Nicarry 208 computer laboratories and in the Computer Science commons area (E284).\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"9f9fcc35d40a5951ff8eec4e135a2e6c","permalink":"https://Peilong.github.io/courses/cs121/software/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs121/software/","section":"courses","summary":"Skulpt An online Python interpreter for quick typing and note-taking. Available at: https://skulpt.org/using.html\nCS 121 Software Anaconda Individual The Python packages and environment that you need to install on your computer to execute Python programs.\nVisual Studio Code Our Integrated Development Environment (IDE) for writing Python scripts.\nThe installation guide for both software is provided on zyBook Chapter 1.6: Installing CS121 Software Tools.\nDownload Anaconda from: https://www.anaconda.com/products/individual Download VS Code from: https://code.","tags":null,"title":"Software","type":"docs"},{"authors":null,"categories":null,"content":"Visual Studio Code Downlaod VS Code from this link and install the Java extension. Follow the instructions posted on Canvas as \u0026ldquo;Java JDK and VSCode Installation Guide\u0026rdquo;.\nJava Development Kit (JDK) JDK comes with different vairations provided by different vendors. Some popular ones are OpenJDK, Oracle Java SE, Amazon Corretto, etc. I recommend installing Adoptium\u0026rsquo;s Temurin via VS Code \u0026ndash; it\u0026rsquo;s so much easier for beginners. The tutorial can be found on the instructions posted on Canvas as \u0026ldquo;Java JDK and VSCode Installation Guide\u0026rdquo;.\nNote:\nAll the software and operating systems are available on the computers in the Esbenshade 281, Hoover 108 and Nicarry 208 computer laboratories and in the Computer Science commons area (E284).\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"87a61437f7338737a299b1f6a5cbc364","permalink":"https://Peilong.github.io/courses/cs122/software/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs122/software/","section":"courses","summary":"Visual Studio Code Downlaod VS Code from this link and install the Java extension. Follow the instructions posted on Canvas as \u0026ldquo;Java JDK and VSCode Installation Guide\u0026rdquo;.\nJava Development Kit (JDK) JDK comes with different vairations provided by different vendors. Some popular ones are OpenJDK, Oracle Java SE, Amazon Corretto, etc. I recommend installing Adoptium\u0026rsquo;s Temurin via VS Code \u0026ndash; it\u0026rsquo;s so much easier for beginners. The tutorial can be found on the instructions posted on Canvas as \u0026ldquo;Java JDK and VSCode Installation Guide\u0026rdquo;.","tags":null,"title":"Software","type":"docs"},{"authors":null,"categories":null,"content":"Google Cloud Platform Google Cloud Platform (GCP) is the main development environment we will be using in this course. Refer to the guide on Canvas for setup. link.\nOnce the setup is ready, you will have:\n A virtual machine running with Ubuntu 20.04 LTS A lightweight desktop GUI that allows for remote desktop connection GNU C development toolset: GCC compiler, GDB debugger, make utility, etc. Docker engine. Visual Studio Code IDE, and other desktop applications.  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"efd615e0f4e96c17df8b594e7418028b","permalink":"https://Peilong.github.io/courses/cs222/software/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs222/software/","section":"courses","summary":"Google Cloud Platform Google Cloud Platform (GCP) is the main development environment we will be using in this course. Refer to the guide on Canvas for setup. link.\nOnce the setup is ready, you will have:\n A virtual machine running with Ubuntu 20.04 LTS A lightweight desktop GUI that allows for remote desktop connection GNU C development toolset: GCC compiler, GDB debugger, make utility, etc. Docker engine. Visual Studio Code IDE, and other desktop applications.","tags":null,"title":"Software","type":"docs"},{"authors":null,"categories":null,"content":"Anaconda Individual Edition In this course, the only software you\u0026rsquo;ll need to install is the Anaconda Individual Edition. Anaconda is a widely-used data science platform that includes nearly all the packages you\u0026rsquo;ll need for Python and R. Please download the Python 3.10+ version from the following link, choosing the installer that matches your operating system: https://www.anaconda.com/products/individual.\nNote:\nAnaconda is also available on the computers in the Esbenshade 281, Hoover 108 and Nicarry 208 computer laboratories and in the Computer Science commons area (E284).\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"f080244bd221edfd9a771c8b425dd883","permalink":"https://Peilong.github.io/courses/cs250/software/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs250/software/","section":"courses","summary":"Anaconda Individual Edition In this course, the only software you\u0026rsquo;ll need to install is the Anaconda Individual Edition. Anaconda is a widely-used data science platform that includes nearly all the packages you\u0026rsquo;ll need for Python and R. Please download the Python 3.10+ version from the following link, choosing the installer that matches your operating system: https://www.anaconda.com/products/individual.\nNote:\nAnaconda is also available on the computers in the Esbenshade 281, Hoover 108 and Nicarry 208 computer laboratories and in the Computer Science commons area (E284).","tags":null,"title":"Software","type":"docs"},{"authors":null,"categories":null,"content":"Anaconda Individual Edition In this course, the only software you\u0026rsquo;ll need to install is the Anaconda Individual Edition. Anaconda is a widely-used data science platform that includes nearly all the packages you\u0026rsquo;ll need for Python and R. Please download the Python 3.10+ version from the following link, choosing the installer that matches your operating system: https://www.anaconda.com/products/individual.\nNote:\nAnaconda is also available on the computers in the Esbenshade 281, Hoover 108 and Nicarry 208 computer laboratories and in the Computer Science commons area (E284).\nGoogle Colab Google Colab (link) is a cloud-based Jupyter notebook-like service that is free for use under certain usage quota. It is required that students learn to use this service for speeding up the training time for Deep Learning models.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"e37192b689b8c3386fa6558ca4b5aeb0","permalink":"https://Peilong.github.io/courses/cs350/software/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs350/software/","section":"courses","summary":"Anaconda Individual Edition In this course, the only software you\u0026rsquo;ll need to install is the Anaconda Individual Edition. Anaconda is a widely-used data science platform that includes nearly all the packages you\u0026rsquo;ll need for Python and R. Please download the Python 3.10+ version from the following link, choosing the installer that matches your operating system: https://www.anaconda.com/products/individual.\nNote:\nAnaconda is also available on the computers in the Esbenshade 281, Hoover 108 and Nicarry 208 computer laboratories and in the Computer Science commons area (E284).","tags":null,"title":"Software","type":"docs"},{"authors":null,"categories":null,"content":"Google Cloud Platform (GCP):  Check out the \u0026ldquo;GCP_setup.pdf\u0026rdquo; guide on Canvas.  Use software on the campus server:  Hadoop ecosystem software: http://adal.etown.edu. Use SSH to access. PySpark enabled Jupyter Notebook: http://adal.etown.edu:12345  (Optional) Install HDP Sandbox by yourself:   Docker Engine: https://docs.docker.com/engine/install/. Find the correct installation guide for your operating systems.\n  Hortonworks Data Platform (HDP) on Sandbox version 2.6.5: https://www.cloudera.com/downloads/hortonworks-sandbox/hdp.html You need to register a Cloudera account first, then choose the correct installation type on Docker (less resource demanding than a virtual machine). The recommended configuration is 4 CPUs and 8 GB of free RAM; however, 2 CPU and 6 GBs of RAM should be enough for our case. Reducing the amount of RAM will make some of the services unavailable.\n  Follow along the tutorial to install HDP on docker engine: https://www.cloudera.com/tutorials/sandbox-deployment-and-install-guide/3.html\n  Install PySpark for Your Own Jupyter Server:  Checkout my tutorial on Github: https://github.com/Peilong/PySparkOnJupyter/blob/master/README.md  ","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"b93bc5a3ba9788d07522c0823251405d","permalink":"https://Peilong.github.io/courses/cs354/software/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs354/software/","section":"courses","summary":"Google Cloud Platform (GCP):  Check out the \u0026ldquo;GCP_setup.pdf\u0026rdquo; guide on Canvas.  Use software on the campus server:  Hadoop ecosystem software: http://adal.etown.edu. Use SSH to access. PySpark enabled Jupyter Notebook: http://adal.etown.edu:12345  (Optional) Install HDP Sandbox by yourself:   Docker Engine: https://docs.docker.com/engine/install/. Find the correct installation guide for your operating systems.\n  Hortonworks Data Platform (HDP) on Sandbox version 2.6.5: https://www.cloudera.com/downloads/hortonworks-sandbox/hdp.html You need to register a Cloudera account first, then choose the correct installation type on Docker (less resource demanding than a virtual machine).","tags":null,"title":"Software","type":"docs"},{"authors":null,"categories":null,"content":"A laptop with at least 4GB of RAM and 20 GB of disk space is required for this course.\nAll SEED Labs: Access all SEED labs from: link.\nOption 1 (Recommended): Setup SEED VM on Google Cloud Platform: A GCP setup guide can be found on Canvas.\nOption 2: Setup SEED VM on Virtualbox: Install SEED VM lab environment on your own laptop: tutorial.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"1d3de9dce4cdc2b968bb2b3ae9ef3491","permalink":"https://Peilong.github.io/courses/cs363/software/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs363/software/","section":"courses","summary":"A laptop with at least 4GB of RAM and 20 GB of disk space is required for this course.\nAll SEED Labs: Access all SEED labs from: link.\nOption 1 (Recommended): Setup SEED VM on Google Cloud Platform: A GCP setup guide can be found on Canvas.\nOption 2: Setup SEED VM on Virtualbox: Install SEED VM lab environment on your own laptop: tutorial.","tags":null,"title":"Software","type":"docs"},{"authors":null,"categories":null,"content":"A laptop with at least 4GB of RAM and 20 GB of disk space is required for this course.\nAll SEED Labs: Access all SEED labs from: link.\nOption 1 (Recommended): Setup SEED VM on Google Cloud Platform: A GCP setup guide can be found on Canvas.\nOption 2: Setup SEED VM on Virtualbox: Install SEED VM lab environment on your own laptop: tutorial.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557010800,"objectID":"b9f42b81b2f72bf85a31781d86bd4f02","permalink":"https://Peilong.github.io/courses/cs364/software/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/cs364/software/","section":"courses","summary":"A laptop with at least 4GB of RAM and 20 GB of disk space is required for this course.\nAll SEED Labs: Access all SEED labs from: link.\nOption 1 (Recommended): Setup SEED VM on Google Cloud Platform: A GCP setup guide can be found on Canvas.\nOption 2: Setup SEED VM on Virtualbox: Install SEED VM lab environment on your own laptop: tutorial.","tags":null,"title":"Software","type":"docs"},{"authors":["Onur Barut","Yan Luo","Tong Zhang","Weigang Li","Peilong Li"],"categories":null,"content":"","date":1623628800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1623628800,"objectID":"d89e1b132404b419bfe33ba7a8a3e2f2","permalink":"https://Peilong.github.io/publication/2021-icc/","publishdate":"2021-06-14T00:00:00Z","relpermalink":"/publication/2021-icc/","section":"publication","summary":"Classifying network traffic is the basis for important network applications. Prior research in this area has faced challenges on the availability of representative datasets, and many of the results cannot be readily reproduced. Such a problem is exacerbated by emerging data-driven machine learning based approaches. To address this issue, we present $(Net)^2$ database with three open datasets containing nearly 1.3M labeled flows in total, with a comprehensive list of flow features, for the research community. We focus on broad aspects in network traffic analysis, including both malware detection and application classification. As we continue to grow them, we expect the datasets to serve as a common ground for AI driven, reproducible research on network flow analytics. We release the datasets publicly and also introduce a Multi-Task Hierarchical Learning (MTHL) model to perform all tasks in a single model. Our results show that MTHL is capable of accurately performing multiple tasks with hierarchical labeling with a dramatic reduction in training time.","tags":null,"title":"Multi-Task Hierarchical Learning Based Network Traffic Analytics","type":"publication"},{"authors":["Onur Barut","Matthew Grohotolski","Connor DiLeo","Yan Luo","Peilong Li","Tong Zhang"],"categories":null,"content":"","date":1608595200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608595200,"objectID":"067aad855526dc3535e4733486e528a4","permalink":"https://Peilong.github.io/publication/2020-nsyss/","publishdate":"2020-12-22T00:00:00Z","relpermalink":"/publication/2020-nsyss/","section":"publication","summary":"The increasing volume of encrypted network traffic yields a clutter for hackers to use encryption to spread their malicious software on the network. We study the problem of detecting TLS-encrypted malware on the client side using metadata and TLS protocol related flow features. We conduct a comprehensive study on a set of widely used machine learning and deep learning algorithms to detect encrypted malware on two malware flows datasets. In addition to reporting the classification accuracy of the approaches under study, we conduct comprehensive experiments to quantify their run-time performance in terms of throughput and system resource utilization such as the CPU and RAM utilization. Moreover, we further boost the speed of the detection systems using acceleration libraries such as DAAL and OpenVINO. Through the quantitative analysis, we provide a comparison on the effectiveness and run-time performance of the machine learning models, and evaluate techniques to accelerate real-world deployment.","tags":null,"title":"Machine learning based malware detection on encrypted traffic: A comprehensive performance study","type":"publication"},{"authors":["Hao Jin","Chen Xu","Yan Luo","Peilong Li"],"categories":null,"content":"","date":1601596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1601596800,"objectID":"6d163a38026b77a8cd5fe7fc69ce445f","permalink":"https://Peilong.github.io/publication/2020-ica3pp/","publishdate":"2020-10-02T00:00:00Z","relpermalink":"/publication/2020-ica3pp/","section":"publication","summary":"This paper is an exploration to securely integrate geo-scattered medical data silos and to provide privacy-preserving data sharing via blockchain and cryptography. We leverage broadcast encryption, key regression, data privacy classification, blockchain and smart contract holistically to address such a challenge. In our design, a patient’s medical records are divided into multiple parts with different sensitivities according to personal privacy requirements. Each part is encrypted with a symmetric encryption key and it is broadcast encrypted to a pre-defined user set. Data encryption keys are generated by a key regression scheme, where keys used to encrypt low-sensitivity data parts can be derived from keys used to encrypt high-sensitivity data parts. With such a mechanism, we can enforce strict access and privacy control on medical data. Furthermore, we use Ethereum blockchain to connect various institutions to provide efficient data sharing, and we design smart contracts to implement the business logic of medical data sharing.","tags":null,"title":"Blockchain-based secure and privacy-preserving clinical data sharing and integration","type":"publication"},{"authors":["Derek Manning","Peilong Li","Xiaoban Wu","Yan Luo","Tong Zhang","Weigang Li"],"categories":null,"content":"","date":1591488000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1591488000,"objectID":"2754a7c3d811a2b9202605f5253d41d4","permalink":"https://Peilong.github.io/publication/2020-icc-aceta/","publishdate":"2020-06-07T00:00:00Z","relpermalink":"/publication/2020-icc-aceta/","section":"publication","summary":"Applying machine learning techniques to detect malicious encrypted network traffic has become a challenging research topic. Traditional approaches based on studying network patterns fail to operate on encrypted data, especially without compromising the integrity of encryption. In addition, the requirement of rendering network-wide intelligent protection in a timely manner further exacerbates the problem. In this paper, we propose to leverage ×86 multicore platforms provisioned at enterprises' network edge with the software accelerators to design an encrypted traffic analytics (ETA) system with accelerated speed. Specifically, we explore a suite of data features and machine learning models with an open dataset. Then we show that by using Intel DAAL and OpenVINO libraries in model training and inference, we are able to reduce the training and inference time by a maximum order of 31× and 46× respectively while retaining the model accuracy.","tags":null,"title":"ACETA: Accelerating Encrypted Traffic Analytics on Network Edge","type":"publication"},{"authors":["Onur Barut","Yan Luo","Tong Zhang","Weigang Li","Peilong Li"],"categories":null,"content":"","date":1586044800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1586044800,"objectID":"ba1903bd97997cbc3732649469c13186","permalink":"https://Peilong.github.io/publication/2020-arxiv-netml/","publishdate":"2020-04-05T00:00:00Z","relpermalink":"/publication/2020-arxiv-netml/","section":"publication","summary":"Classifying network traffic is the basis for important network applications. Prior research in this area has faced challenges on the availability of representative datasets, and many of the results cannot be readily reproduced. Such a problem is exacerbated by emerging data-driven machine learning based approaches. To address this issue, we provide three open datasets containing almost 1.3M labeled flows in total, with flow features and anonymized raw packets, for the research community. We focus on broad aspects in network traffic analysis, including both malware detection and application classification. We release the datasets in the form of an open challenge called NetML and implement several machine learning methods including random-forest, SVM and MLP. As we continue to grow NetML, we expect the datasets to serve as a common platform for AI driven, reproducible research on network flow analytics.","tags":null,"title":"Netml: A challenge for network traffic analytics","type":"publication"},{"authors":["Hao Jin","Chen Xu","Yan Luo","Peilong Li","Yu Cao","Jomol Mathew"],"categories":null,"content":"","date":1575417600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1575417600,"objectID":"0b30403f6a789de002b391a5ebb6367a","permalink":"https://Peilong.github.io/publication/2019-icpads-medical/","publishdate":"2019-12-04T00:00:00Z","relpermalink":"/publication/2019-icpads-medical/","section":"publication","summary":"In the era of cloud computing and big data analysis, how to efficiently share and utilize medical information scattered across various care providers has become a critical problem. This paper proposes a new framework for sharing medical data in a secure and privacy-preserving way. This framework holistically integrates multi-authority attribute based encryption, blockchain and smart contract, as well as software defined networking to define and enforce sharing policies. Specifically in our framework, patients' medical records are encrypted and stored in hospital databases, where strict access controls are enforced with attribute based encryption coupled with privacy level classification. Our framework leverages blockchain technology to connect scattered private databases from participating hospitals for efficient and secure data provision, smart contracts to enable the business logic of clinical data usage, and software defined networking to revoke sharing privileges. The performance evaluation of our prototype demonstrates that the associated computation costs are reasonable in practice.","tags":null,"title":"Toward Secure, Privacy-Preserving, and Interoperable Medical Data Sharing via Blockchain","type":"publication"},{"authors":["Xiaoban Wu","Peilong Li","Timothy Miskell","Liang-Min Wang","Yan Luo","Xiaohong Jiang"],"categories":null,"content":"","date":1570665600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1570665600,"objectID":"eee33b16294807435eb8538936ae97a0","permalink":"https://Peilong.github.io/publication/2019-nana-ripple/","publishdate":"2019-10-10T00:00:00Z","relpermalink":"/publication/2019-nana-ripple/","section":"publication","summary":"The P4 language was originally proposed as a means of providing programmable network data plane functions with the potential to implement, understand, and interpret custom protocols. However, the recompilation process and the re-instantiation of network functions on a target device introduces measurable downtime for network services. In this work, we present Ripple, an efficient, runtime reconfigurable P4 engine on multicore systems to eliminate the recompilation process. The Ripple framework adopts the \"generic and static\" philosophy, and uses a highly optimized universal binary executable to avoid the lengthy recompilation and reconfiguration process, while supporting packet processing at line rates. We leverage advanced I/O and vectorization techniques to take advantage of packet level parallelism and processor architectural features, thus significantly improve the performance of P4 data plane at runtime. Our in-depth evaluation on multicore architecture shows that Ripple reaches comparable throughput with one of the state-of-art frameworks that requires recompilation and reconfiguration.","tags":null,"title":"Ripple: An Efficient Runtime Reconfigurable P4 Data Plane for Multicore Systems","type":"publication"},{"authors":["Peilong Li","Chen Xu","Hao Jin","Chunyang Hu","Yan Luo","Yu Cao","Jomol Mathew","Yunsheng Ma"],"categories":null,"content":"","date":1568764800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1568764800,"objectID":"9c6a403908a733bb28638bc237651dbe","permalink":"https://Peilong.github.io/publication/2019-ieee-chainsdi/","publishdate":"2019-09-18T00:00:00Z","relpermalink":"/publication/2019-ieee-chainsdi/","section":"publication","summary":"Healthcare networking and computing infrastructure is rapidly changing from closed environments to open environments that incorporate ubiquitous medical devices and novel application scenarios. For example, home-based healthcare involves the collection and analysis of data from pervasive sensors (often in real time) to guide therapy or to perform medical interventions. In this article, we address the challenges of data interoperability and regulatory compliance when designing and deploying healthcare applications in a heterogeneous home-edge-cloud environment. We propose the ChainSDI framework that leverages the blockchain technique along with abundant edge computing resources to manage secure data sharing and computing on sensitive patient data. We implement programmable ChainSDI application programming interfaces to facilitate the specification of home-based healthcare services running on a software-defined infrastructure (SDI). This article is a collaboration between computer scientists, medical researchers, healthcare IT professionals as well as healthcare providers with the goal of increasing the availability of SDI infrastructures while meeting the performance and regulatory requirements of healthcare applications. Our prototype demonstrates the feasibility of the framework and serves as a testbed for novel experimental studies in the context of emerging healthcare applications.","tags":null,"title":"ChainSDI: A Software-Defined Infrastructure for Regulation-Compliant Home-Based Healthcare Services Secured by Blockchains","type":"publication"},{"authors":["Hao Jin","Yan Luo","Peilong Li","Jomol Mathew"],"categories":null,"content":"","date":1557792000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1557792000,"objectID":"4ca9fda7df3311f39c2803cd756fbd57","permalink":"https://Peilong.github.io/publication/2019-ieee-review/","publishdate":"2019-05-14T00:00:00Z","relpermalink":"/publication/2019-ieee-review/","section":"publication","summary":"In the digital healthcare era, it is of the utmost importance to harness medical information scattered across healthcare institutions to support in-depth data analysis and achieve personalized healthcare. However, the cyberinfrastructure boundaries of healthcare organizations and privacy leakage threats place obstacles on the sharing of medical records. Blockchain, as a public ledger characterized by its transparency, tamper-evidence, trustlessness, and decentralization, can help build a secure medical data exchange network. This paper surveys the state-of-the-art schemes on secure and privacy-preserving medical data sharing of the past decade with a focus on blockchain-based approaches. We classify them into permissionless blockchain-based approaches and permissioned blockchain-based approaches and analyze their advantages and disadvantages. We also discuss potential research topics on blockchain-based medical data sharing.","tags":null,"title":"A Review of Secure and Privacy-Preserving Medical Data Sharing","type":"publication"},{"authors":["Hao Jin","Yan Luo","Peilong Li"],"categories":null,"content":"","date":1553644800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553644800,"objectID":"971c70f84209de2e00124ef901c3ec38","permalink":"https://Peilong.github.io/publication/2019-sdn-nfvsec-position/","publishdate":"2019-03-27T00:00:00Z","relpermalink":"/publication/2019-sdn-nfvsec-position/","section":"publication","summary":"In the digital healthcare era, it is utmost important to harness medical information scattered across healthcare institutions to support in-depth data analysis. However, the boundaries of cyberinfrastructure of healthcare providers place obstacles on data sharing. In this position paper, we firstly identify the challenges of medical data sharing and management. Then we introduce the background and give a brief survey on the state-of-the-art. Finally, we conclude the paper by discussing a few possible research directions to cope with the challenges in current medical information sharing.","tags":null,"title":"A Blockchain Future for Secure Clinical Data Sharing: A Position Paper","type":"publication"},{"authors":["Chen Xu","Peilong Li","Yan Luo"],"categories":null,"content":"","date":1543622400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1543622400,"objectID":"2742635e72f76e308948b0179b1c848a","permalink":"https://Peilong.github.io/publication/2018-fgcs/","publishdate":"2018-12-01T00:00:00Z","relpermalink":"/publication/2018-fgcs/","section":"publication","summary":"The Science DMZ model employs dedicated network infrastructures and advanced software techniques for large-volume scientific research traffic flows targeting high-throughput and low-latency data transfer. However, current Science DMZ framework lacks of efficient means of user-intent expression and suffers from slow service-delivery due to the manual work involved in the management loop. As a result, a programmable interface that facilitates user–administrator communication in a time-efficient manner is highly demanded. In this paper, we introduce FLowell, an enhanced SDN-powered Science DMZ model deployed on our campus network. Moreover, we propose a programmable policy engine atop the SDN controller that allows network administrators to implement configuration policies in order to manage the network, while simultaneously offering rapid response time network resource request policies for end users. Our experiment results show that user intent in FLowell can be responded and serviced within 1 s. In addition, FLowell reduces the network latency for the research network path by 35%, and boost the disk-to-disk throughput by up to the 10 Gbps line rate.","tags":null,"title":"A programmable policy engine to facilitate time-efficient science DMZ management.","type":"publication"},{"authors":["Yongyi Ran","Xiaoban Wu","Peilong Li","Chen Xu","Yan Luo","Liang-Min Wang"],"categories":null,"content":"","date":1524441600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1524441600,"objectID":"6d551444da6a3ccacb597e4f4ed82b4c","permalink":"https://Peilong.github.io/publication/2018-noms-equery/","publishdate":"2018-04-23T00:00:00Z","relpermalink":"/publication/2018-noms-equery/","section":"publication","summary":"Network measurement is critical in network management such as performance monitoring, diagnosis, and traffic engineering. However, conventional network measurement solutions are limited by simple and fixed functionalities as well as coarse-grained statistics which often fail to precisely illustrate network conditions. In this paper, we propose an event-driven declarative query language, EQuery, for programmable network management in order to design sophisticated measurement tasks and enable event mechanism to avoid human intervene. Furthermore, we design a compiler to support the query language on the EQuery Controller, which drives the chaining query workflow with nondeterministic finite automaton (NFA), and translates measurement jobs into low-level rules/states on the physical devices. Finally, we evaluate the effectiveness of our EQuery framework on a nation-wide operational network with real-time network statistics.","tags":null,"title":"EQuery: Enable event-driven declarative queries in programmable network measurement","type":"publication"},{"authors":["Peilong Li","Chen Xu","Yan Luo","Yu Cao","Jomol Mathew","Yunsheng Ma"],"categories":null,"content":"","date":1500249600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1500249600,"objectID":"17a9b2e7277654420fbbe69a4ee0e713","permalink":"https://Peilong.github.io/publication/2017-chase/","publishdate":"2017-07-17T00:00:00Z","relpermalink":"/publication/2017-chase/","section":"publication","summary":"Healthcare network and computing infrastructure is rapidly changing from closed environments to open environments that incorporate new devices and new application scenarios. Home-based healthcare is such an example of leveraging pervasive sensors and analyzing sensor data (often in real-time) to guide therapy or intervene. In this paper, we address the challenges in regulatory compliance when designing and deploying healthcare applications on a heterogeneous cloud environment. We propose the CareNet framework, consisting of a set of APIs and secure data transmission mechanisms, to facilitate the specification of home-based healthcare services running on the software-defined infrastructure (SDI). This work is a collaboration among computer scientists, medical researchers, healthcare IT and healthcare providers, and its goal is to reduce the gap between the availability of SDI and meeting regulatory compliance in healthcare applications. Our prototype demonstrates the feasibility of the framework and serves as testbed for novel experimental studies of emerging healthcare applications.","tags":null,"title":"CareNet: Building Regulation-Compliant Home-Based Healthcare Services with Software-Defined Infrastructure","type":"publication"},{"authors":["Yongyi Ran","Xiaoban Wu","Peilong Li","Yan Luo"],"categories":null,"content":"","date":1495324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495324800,"objectID":"18c82c66f927cb136415f9995efd3443","permalink":"https://Peilong.github.io/publication/2017-icc/","publishdate":"2017-05-21T00:00:00Z","relpermalink":"/publication/2017-icc/","section":"publication","summary":"Network function virtualization (NFV) allows software-oriented network functions executed on general-purpose servers or virtual machines (VMs) instead of dedicated hardware, greatly improving the flexibility and scalability of network services. Consequently, NFV would facilitate versatile and dynamic network measurement services to meet the increasingly diversified measurement demands. However, it is challenging to provision the measurement services in a virtualized environment due to the stochastic nature in measurement demand and the special requirements of measurement functions such as location constraint and execution time. In this paper, we compose a measurement service chain as a Virtual Measurement Function (VMF) graph, and then propose a dynamic VMF scheduling algorithm for a software-oriented measurement system using Lyapunov optimization technique to maximize the revenue of the system while guaranteeing the Quality of Service (QoS). The scheduling algorithm decides whether to accept a measurement service request and which measurement nodes (MNs) instantiate the VMF graph. Finally, the performance of our proposed algorithm is verified through theoretical analysis and numerical evaluation. The simulation results show that the proposed algorithm can increase the total avenue by up to 10%, reduce the service average queue delay by 24%, and decrease the service reject rate by up to 10%, comparing with a heuristic algorithm.","tags":null,"title":"Dynamic Virtual Measurement Function scheduling in software-oriented measurement environment","type":"publication"},{"authors":["Peilong Li","Xiaoban Wu","Yongyi Ran","Yan Luo"],"categories":null,"content":"","date":1495065600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1495065600,"objectID":"5355e7810ace8c8345eedf52ce61249f","permalink":"https://Peilong.github.io/publication/2017-ancs/","publishdate":"2017-05-18T00:00:00Z","relpermalink":"/publication/2017-ancs/","section":"publication","summary":"Network function virtualization (NFV) introduces great flexibility in designing software-based network appliances to reduce cost and accelerate service deployment for network operators. However, with the fast development of high speed network of 100 GbE and beyond, how to efficiently design virtual network functions (VNF) on commodity servers has become a challenging problem. Although the advances in network hardware and software have facilitated the design of high speed network applications with hardware acceleration and kernel/driver optimization, how to leverage the existing techniques to design optimized high-performance VNFs still remains vague. In this study, we focus on the design and evaluation of four widely used VNFs covering the domains of network switching/routing, access control, measurement and security, by using a multicore platform supported by Intel DPDK fast packet I/O library. We describe the versatile network packet receiving and processing design options available for implementing such a programmable NFV platform for 100 Gbps network speed. With extensive experiments, we evaluate the performance of the each VNF and its design options in terms of packet drop rate, processing time per packet and delay per packet. Based on the evaluation over the collected data, we propose the optimal design with the given hardware resources to sustain the line rate while achieving the highest level of programmability.","tags":null,"title":"Designing Virtual Network Functions for 100 GbE Network Using Multicore Processors","type":"publication"},{"authors":["Xiaoban Wu","Peilong Li","Yongyi Ran","Yan Luo"],"categories":null,"content":"","date":1493424000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1493424000,"objectID":"6683b23470c7c73ab5762d7702e917ef","permalink":"https://Peilong.github.io/publication/2016-fgcs/","publishdate":"2017-04-29T00:00:00Z","relpermalink":"/publication/2016-fgcs/","section":"publication","summary":"Network measurement has been playing a crucial role in network operations, since it can not only detect the anomalies, but also facilitate traffic engineering. With the fast development of high speed network of 100Gbps and beyond, how to efficiently monitor and measure the network at flow granularity has become a challenging problem. Although there are dedicated network instrumentation appliances, the flexibility of defining measurement network tasks on a programmable platform is very attractive. In this study, we mainly focus on the evaluation of sketch- based network measurement using a multicore platform supported by Intel DPDK, a fast packet I/O library. We describe the versatile system level design options available for implementing such a programmable measurement platform for 100Gbps network links. Through extensive experiments, we investigate these design options and compare their trade-offs. Specifically, we evaluate the performance of the sketch-based measurement in terms of packet drop rate, processing time per packet and delay per packet. Based on the evaluation over the collected data, we propose the best practical measurement implementation to sustain the line rate while achieving the highest level of programmability.","tags":null,"title":"Network Measurement for 100Gbps Links Using Multicore Processors","type":"publication"},{"authors":["Peilong Li","Chen Xu","Yan Luo","Yu Cao","Jomol Mathew","Yunsheng Ma"],"categories":null,"content":"","date":1490313600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490313600,"objectID":"cdac310b9cf9588d04d212caff163838","permalink":"https://Peilong.github.io/publication/2016-sdn-nfv/","publishdate":"2017-03-24T00:00:00Z","relpermalink":"/publication/2016-sdn-nfv/","section":"publication","summary":"Healthcare network and computing infrastructure is rapidly changing from closed environments to open environments that incorporate new devices and new application scenarios. Home-based healthcare is such an example of leveraging pervasive sensors and analyzing sensor data (often in real-time) to guide therapy or intervene. In this paper, we address the challenges in regulatory compliance when designing and deploying healthcare applications on a heterogeneous cloud environment. We propose CareNet framework, consisting of a set of abstraction and APIs, to allow the specification of compliance requirements. This work is a collaboration among computer scientists, medical researchers, healthcare IT and healthcare providers, and its goal is to reduce the gap between the availability of software defined infrastructure and meeting regulatory compliance in healthcare applications.","tags":null,"title":"CareNet: Building a Secure Software-defined Infrastructure for Home-based Healthcare","type":"publication"},{"authors":["Peilong Li","Chen Xu","Yan Luo","Yu Cao","Jomol Mathew","Yunsheng Ma"],"categories":null,"content":"","date":1490313600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1490313600,"objectID":"757994698d78870c1f957b85e21e4c7e","permalink":"https://Peilong.github.io/publication/2017-sdn-nfvsec/","publishdate":"2017-03-24T00:00:00Z","relpermalink":"/publication/2017-sdn-nfvsec/","section":"publication","summary":"Healthcare network and computing infrastructure is rapidly changing from closed environments to open environments that incorporate new devices and new application scenarios. Home-based healthcare is such an example of leveraging pervasive sensors and analyzing sensor data (often in real-time) to guide therapy or intervene. In this paper, we address the challenges in regulatory compliance when designing and deploying healthcare applications on a heterogeneous cloud environment. We propose CareNet framework, consisting of a set of abstraction and APIs, to allow the specification of compliance requirements. This work is a collaboration among computer scientists, medical researchers, healthcare IT and healthcare providers, and its goal is to reduce the gap between the availability of software defined infrastructure and meeting regulatory compliance in healthcare applications.","tags":null,"title":"CareNet: Building a Secure Software-defined Infrastructure for Home-based Healthcare","type":"publication"},{"authors":["Peilong Li","Yan Luo"],"categories":null,"content":"","date":1465862400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1465862400,"objectID":"659c74c509f70e784588dfd520d6b959","permalink":"https://Peilong.github.io/publication/2016-hpsr-p4gpu/","publishdate":"2016-06-14T00:00:00Z","relpermalink":"/publication/2016-hpsr-p4gpu/","section":"publication","summary":"The programmability of the network data plane has become one of the most desirable features within the context of software defined networks, with P4 serving as a domain-specific language for defining data plane processing. In this work, we are motivated to address the challenges of mapping a P4 defined data plane to a heterogeneous programmable hardware architecture consisting of both a CPU and a GPU, which includes a salient parallel SIMD architecture for processing network flows. We first design a toolset that can be used to map a P4 program onto the proposed architecture. We then optimize the GPU kernel designs for “match-action” primitives and present latency-hiding techniques to reduce the overheads of CPU/GPU communication. In addition, load balancing is investigated to maximize the utilization of CPU and GPU resources. Our toolset and optimizations allow a P4 program to render promising performance on the given heterogeneous architecture. Specifically, the experimental results collected on our prototype systems show that the automatically configured GPU kernels achieve scalable lookup and classification speeds with 420 million IP lookups per second, and more than 60 million classifications per second (for 4K firewall rules).","tags":null,"title":"P4GPU: Acceleration of programmable data plane using a CPU-GPU heterogeneous architecture","type":"publication"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"80be3c9fcc86014efab0cec0f14957f6","permalink":"https://Peilong.github.io/project/deep-learning/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/deep-learning/","section":"project","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit.","tags":["deep-learning"],"title":"Deep Learning","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"553a94c5dfd3b8b099d8a12b2d248093","permalink":"https://Peilong.github.io/project/example-external-project/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/example-external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["demo"],"title":"External Project","type":"project"},{"authors":["Peilong Li","Yan Luo"],"categories":null,"content":"","date":1458172800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1458172800,"objectID":"f0825057a12ec8b8b742cd5d86878982","permalink":"https://Peilong.github.io/publication/2016-ancs/","publishdate":"2016-03-17T00:00:00Z","relpermalink":"/publication/2016-ancs/","section":"publication","summary":"The P4 language is an emerging domain-specific language for describing the data plane processing at a network device. P4 has been mapped to a wide range of forwarding devices including NPUs, programmable NICs and FPGAs, except for General Purpose Graphics Processing Unit (GPGPU) which is a salient parallel architecture for processing network flows. In this work, we design a heterogeneous architecture with both CPU and GPU as a P4 programming target, and present a toolset to map a P4 program onto the proposed architecture. Our evaluation reveals that a P4 program can render promising performance on such architecture by parallelizing its “match+action” engine with the GPGPU accelerator. The experiment results show that the auto-configured GPU kernels achieve scalable lookup and classification speeds: the prototype system can reach up to 580 Gbps for IP lookups (64-byte packets) and 60 million classifications per second for 4k firewall rules, respectively.","tags":null,"title":"P4GPU: Accelerate packet processing of a P4 program with a CPU-GPU heterogeneous architecture","type":"publication"},{"authors":["Xiaoban Wu","Peilong Li","Yongyi Ran","Yan Luo"],"categories":null,"content":"","date":1452384000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1452384000,"objectID":"99a5378a2f8778a3f3c13cded0b21258","permalink":"https://Peilong.github.io/publication/2017-fgcs/","publishdate":"2016-01-10T00:00:00Z","relpermalink":"/publication/2017-fgcs/","section":"publication","summary":"Network measurement has been playing a crucial role in network operations, since it cannot only detect the anomalies, but also facilitate traffic engineering. With the fast development of high speed network of 100 Gbps and beyond, how to efficiently monitor and measure the network at flow granularity has become a challenging problem. Although there are dedicated network instrumentation appliances, the flexibility of defining measurement network tasks on a programmable platform is very attractive. In this study, we mainly focus on the evaluation of sketch-based network measurement using a multicore platform supported by Intel DPDK, a fast packet I/O library. We describe the versatile system level design options available for implementing such a programmable measurement platform for 100 GbE network links. Through extensive experiments, we investigate these design options and compare their trade-offs. Specifically, we evaluate the performance of the sketch-based measurement in terms of packet drop rate, processing time per packet and delay per packet. Based on the evaluation over the collected data, we propose the best practical measurement implementation to sustain the line rate while achieving the highest level of programmability.","tags":null,"title":"Network measurement for 100 GbE network links using multicore processors","type":"publication"},{"authors":["Peilong Li","Yan Luo","Jun Yang"],"categories":null,"content":"","date":1451520000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1451520000,"objectID":"5882fd92b34ed10a0b6f44b0751f2977","permalink":"https://Peilong.github.io/publication/2015-jpdc-transformer/","publishdate":"2015-12-31T00:00:00Z","relpermalink":"/publication/2015-jpdc-transformer/","section":"publication","summary":"Heterogeneous architectures face challenges regarding transparent acceleration as well as the allocation of resources to cores and accelerators. The “Transformer”, a run-time reprogrammable, heterogeneous architecture consisting of cores and reconfigurable logic with support for coarse-grained acceleration of the dynamic, unpredictable workloads present in mobile and cloud computing environments, is proposed as a solution. The architecture allows for the run-time instantiation of one or more acceleration functions, present in an on-chip reconfigurable logic, which responds to the demands of compute-intensive software libraries. The hardware controller and software wrapper functions are designed to profile workloads, reprogram the internal logic, and invoke the appropriate acceleration functions. Novel heuristics are derived with respect to the accelerator function scheduling. In order to optimize performance and power efficiency, the appropriate system parameters are explored, including the L1 and L2 cache sizes, the accelerator local buffer sizes, as well as the allocation of resources to the cores and accelerators. The simulation results indicate that the Transformer provides significant improvements in terms of performance, up to 14 for single-type workloads and 2.3 for dynamic workloads, as well as energy efficiency, up to 6.9 for various workloads.","tags":null,"title":"Transformer: Run-time reprogrammable heterogeneous architecture for transparent acceleration of dynamic workloads","type":"publication"},{"authors":["Peilong Li","Yan Luo","Ning Zhang","Yu Cao"],"categories":null,"content":"","date":1438819200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1438819200,"objectID":"225dd449d6c313c5f319d530a6ab731e","permalink":"https://Peilong.github.io/publication/2015-nas-heterospark/","publishdate":"2015-08-06T00:00:00Z","relpermalink":"/publication/2015-nas-heterospark/","section":"publication","summary":"Analytics algorithms on big data sets require tremendous computational capabilities. Spark is a recent development that addresses big data challenges with data and computation distribution and in-memory caching. However, as a CPU only framework, Spark cannot leverage GPUs and a growing set of GPU libraries to achieve better performance and energy efficiency. We present HeteroSpark, a GPU-accelerated heterogeneous architecture integrated with Spark, which combines the massive compute power of GPUs and scalability of CPUs and system memory resources for applications that are both data and compute intensive. We make the following contributions in this work: (1) we integrate the GPU accelerator into current Spark framework to further leverage data parallelism and achieve algorithm acceleration; (2) we provide a plug-n-play design by augmenting Spark platform so that current Spark applications can choose to enable/disable GPU acceleration; (3) application acceleration is transparent to developers, therefore existing Spark applications can be easily ported to this heterogeneous platform without code modifications. The evaluation of HeteroSpark demonstrates up to 18× speedup on a number of machine learning applications.","tags":null,"title":"HeteroSpark: A heterogeneous CPU/GPU Spark platform for machine learning algorithms","type":"publication"},{"authors":["Wencang Zhao","Junbo Zhang","Peilong Li","Yang Li"],"categories":null,"content":"","date":1277164800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1277164800,"objectID":"a11a342bdfb15f1b7d5687624d2b00fa","permalink":"https://Peilong.github.io/publication/2010-icicci/","publishdate":"2010-06-22T00:00:00Z","relpermalink":"/publication/2010-icicci/","section":"publication","summary":"As a crucial procedure in which images are divided into distinct non-overlapping regions and the interested objects are extracted in the process of image analyzing and image recognizing, image segmentation plays a considerable role in extracting medical lesions, measuring specific tissues, and realizing three-dimensional reconstruction. In this paper, integrated with the studies of dental micro-CT images, an image segmentation algorithm based on textural features and neural network is presented to be applied in separating the targeted images from background. By textural-property analysis, the algorithm makes it possible for obtaining image characteristic parameter, which serves as input vector for neural network to extract characteristic information from targeted areas. It is presented in experiments that a relatively better segmentation effect can be expected to improve the accuracy and accelerate segmenting speed.","tags":null,"title":"Study of Image Segmentation Algorithm Based on Textural Features and Neural Network","type":"publication"}]